jQuery(document).ready(function($) {
    console.log('üîß –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ textarea –ø–æ–ª–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏
    if (!window.currentDeliveryData) {
        window.currentDeliveryData = { dostavka: '', manager: '' };
    }
    
    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π
    function fillTextareaFields() {
        const textareas = $('.wp-block-checkout-fields-for-blocks-textarea textarea');
        
        textareas.each(function() {
            const textarea = this;
            const container = $(textarea).closest('.wp-block-checkout-fields-for-blocks-textarea');
            
            let value = '';
            
            if (container.hasClass('sdek') && window.currentDeliveryData.dostavka) {
                value = String(window.currentDeliveryData.dostavka);
            } else if (container.hasClass('manag') && window.currentDeliveryData.manager) {
                value = String(window.currentDeliveryData.manager);
            }
            
            if (value) {
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
                textarea.value = value;
                textarea.defaultValue = value;
                $(textarea).val(value);
                
                // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ
                textarea.setAttribute('data-dirty', 'true');
                textarea.setAttribute('data-filled', 'true');
                
                // –≠–º—É–ª–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
                textarea.dispatchEvent(new Event('input', { bubbles: true, cancelable: true }));
                textarea.dispatchEvent(new Event('change', { bubbles: true, cancelable: true }));
                textarea.dispatchEvent(new Event('blur', { bubbles: true, cancelable: true }));
                
                // –¢–∞–∫–∂–µ —á–µ—Ä–µ–∑ jQuery
                $(textarea).trigger('input').trigger('change').trigger('blur');
                
                console.log(`üîÑ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ: ${value}`);
                console.log(`üìù –ü—Ä–æ–≤–µ—Ä–∫–∞: textarea.value = "${textarea.value}"`);
            }
        });
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –ø–ª–∞–≥–∏–Ω–∞
    function updateCheckoutFieldsForBlocksAPI() {
        if (!window.wp?.data?.dispatch) return;
        
        try {
            const checkoutStore = window.wp.data.dispatch('wc/store/checkout');
            if (!checkoutStore || typeof checkoutStore.setExtensionData !== 'function') return;
            
            if (window.currentDeliveryData.dostavka) {
                const dostavkaValue = String(window.currentDeliveryData.dostavka);
                checkoutStore.setExtensionData('checkout-fields-for-blocks', '_meta_dostavka', dostavkaValue);
                console.log('üîÑ API: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ _meta_dostavka =', dostavkaValue);
            }
            
            if (window.currentDeliveryData.manager) {
                const managerValue = String(window.currentDeliveryData.manager);
                checkoutStore.setExtensionData('checkout-fields-for-blocks', '_meta_manager', managerValue);
                console.log('üîÑ API: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ _meta_manager =', managerValue);
            }
        } catch (e) {
            console.log('‚ùå –û—à–∏–±–∫–∞ API:', e);
        }
    }
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º
    function interceptFormSubmission() {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        $(document).on('submit', 'form', function(e) {
            console.log('üì§ –ü–µ—Ä–µ—Ö–≤–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã');
            forceUpdateAllFields(); // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        });
        
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º Fetch API
        const originalFetch = window.fetch;
        window.fetch = function(...args) {
            const [url, options] = args;
            
            if (url && (url.includes('wc-store/checkout') || url.includes('checkout'))) {
                console.log('üì§ –ü–µ—Ä–µ—Ö–≤–∞—Ç Fetch –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞—É—Ç–∞');
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                fillTextareaFields();
                
                if (options?.body) {
                    try {
                        const originalBody = options.body;
                        let modifiedBody = options.body;
                        
                        if (typeof options.body === 'string') {
                            if (options.body.trim().startsWith('{')) {
                                // JSON
                                const jsonData = JSON.parse(options.body);
                                if (window.currentDeliveryData.dostavka) {
                                    jsonData.dostavka = String(window.currentDeliveryData.dostavka);
                                    jsonData._meta_dostavka = String(window.currentDeliveryData.dostavka);
                                }
                                if (window.currentDeliveryData.manager) {
                                    jsonData.manager = String(window.currentDeliveryData.manager);
                                    jsonData._meta_manager = String(window.currentDeliveryData.manager);
                                }
                                modifiedBody = JSON.stringify(jsonData);
                            } else {
                                // Form data
                                const formData = new URLSearchParams(options.body);
                                if (window.currentDeliveryData.dostavka) {
                                    formData.set('dostavka', String(window.currentDeliveryData.dostavka));
                                    formData.set('_meta_dostavka', String(window.currentDeliveryData.dostavka));
                                }
                                if (window.currentDeliveryData.manager) {
                                    formData.set('manager', String(window.currentDeliveryData.manager));
                                    formData.set('_meta_manager', String(window.currentDeliveryData.manager));
                                }
                                modifiedBody = formData.toString();
                            }
                        } else if (options.body instanceof FormData) {
                            const formData = new FormData();
                            for (let [key, value] of options.body.entries()) {
                                formData.append(key, value);
                            }
                            if (window.currentDeliveryData.dostavka) {
                                formData.append('dostavka', String(window.currentDeliveryData.dostavka));
                                formData.append('_meta_dostavka', String(window.currentDeliveryData.dostavka));
                            }
                            if (window.currentDeliveryData.manager) {
                                formData.append('manager', String(window.currentDeliveryData.manager));
                                formData.append('_meta_manager', String(window.currentDeliveryData.manager));
                            }
                            modifiedBody = formData;
                        }
                        
                        if (modifiedBody !== options.body) {
                            options.body = modifiedBody;
                            console.log('‚úÖ Fetch –¥–∞–Ω–Ω—ã–µ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã');
                        }
                    } catch (e) {
                        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ Fetch:', e);
                    }
                }
            }
            
            return originalFetch.apply(this, args);
        };
        
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º AJAX
        $(document).ajaxSend(function(event, xhr, settings) {
            if (settings.url && (settings.url.includes('wc-store/checkout') || settings.url.includes('checkout'))) {
                console.log('üì§ –ü–µ—Ä–µ—Ö–≤–∞—Ç AJAX –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞—É—Ç–∞');
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                fillTextareaFields();
                
                if (settings.data) {
                    try {
                        const originalData = settings.data;
                        let modifiedData = settings.data;
                        
                        if (typeof settings.data === 'string') {
                            if (settings.data.trim().startsWith('{')) {
                                const jsonData = JSON.parse(settings.data);
                                if (window.currentDeliveryData.dostavka) {
                                    jsonData.dostavka = String(window.currentDeliveryData.dostavka);
                                    jsonData._meta_dostavka = String(window.currentDeliveryData.dostavka);
                                }
                                if (window.currentDeliveryData.manager) {
                                    jsonData.manager = String(window.currentDeliveryData.manager);
                                    jsonData._meta_manager = String(window.currentDeliveryData.manager);
                                }
                                modifiedData = JSON.stringify(jsonData);
                            } else {
                                const formData = new URLSearchParams(settings.data);
                                if (window.currentDeliveryData.dostavka) {
                                    formData.set('dostavka', String(window.currentDeliveryData.dostavka));
                                    formData.set('_meta_dostavka', String(window.currentDeliveryData.dostavka));
                                }
                                if (window.currentDeliveryData.manager) {
                                    formData.set('manager', String(window.currentDeliveryData.manager));
                                    formData.set('_meta_manager', String(window.currentDeliveryData.manager));
                                }
                                modifiedData = formData.toString();
                            }
                        } else if (typeof settings.data === 'object') {
                            modifiedData = { ...settings.data };
                            if (window.currentDeliveryData.dostavka) {
                                modifiedData.dostavka = String(window.currentDeliveryData.dostavka);
                                modifiedData._meta_dostavka = String(window.currentDeliveryData.dostavka);
                            }
                            if (window.currentDeliveryData.manager) {
                                modifiedData.manager = String(window.currentDeliveryData.manager);
                                modifiedData._meta_manager = String(window.currentDeliveryData.manager);
                            }
                        }
                        
                        if (modifiedData !== settings.data) {
                            settings.data = modifiedData;
                            console.log('‚úÖ AJAX –¥–∞–Ω–Ω—ã–µ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã');
                        }
                    } catch (e) {
                        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ AJAX:', e);
                    }
                }
            }
        });
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    setTimeout(function() {
        try {
            interceptFormSubmission();
            fillTextareaFields();
            updateCheckoutFieldsForBlocksAPI();
            console.log('‚úÖ –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        }
    }, 1000);
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    setInterval(function() {
        fillTextareaFields();
        updateCheckoutFieldsForBlocksAPI();
    }, 1000); // –£–≤–µ–ª–∏—á–∏–ª–∏ —á–∞—Å—Ç–æ—Ç—É –¥–æ 1 —Å–µ–∫—É–Ω–¥—ã
    
    // –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
    function forceUpdateAllFields() {
        console.log('üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª–µ–π');
        fillTextareaFields();
        updateCheckoutFieldsForBlocksAPI();
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ textarea –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        $('textarea').each(function() {
            const textarea = this;
            const container = $(textarea).closest('.wp-block-checkout-fields-for-blocks-textarea');
            
            if (container.length) {
                let value = '';
                
                if (container.hasClass('sdek') && window.currentDeliveryData.dostavka) {
                    value = String(window.currentDeliveryData.dostavka);
                } else if (container.hasClass('manag') && window.currentDeliveryData.manager) {
                    value = String(window.currentDeliveryData.manager);
                }
                
                if (value) {
                    textarea.value = value;
                    $(textarea).val(value);
                    textarea.dispatchEvent(new Event('input', { bubbles: true }));
                    textarea.dispatchEvent(new Event('change', { bubbles: true }));
                    console.log(`üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${value}`);
                }
            }
        });
    }
    
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    window.updateTextareaFields = fillTextareaFields;
    window.updateCheckoutFieldsForBlocksAPI = updateCheckoutFieldsForBlocksAPI;
    window.forceUpdateAllFields = forceUpdateAllFields;
    
    console.log('üéØ –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ textarea –ø–æ–ª–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
});