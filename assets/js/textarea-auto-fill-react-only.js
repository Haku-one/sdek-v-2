jQuery(document).ready(function($) {
    console.log('üîß –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ textarea –ø–æ–ª–µ–π - —Ç–æ–ª—å–∫–æ React —ç–º—É–ª—è—Ü–∏—è');
    
    let updateTimeout;
    
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    window.currentDeliveryData = {
        dostavka: '',
        manager: ''
    };
    
    // –î–µ–±–∞—É–Ω—Å–∏–Ω–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —á–∞—Å—Ç—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    function debouncedUpdate() {
        clearTimeout(updateTimeout);
        updateTimeout = setTimeout(updateTextareaFields, 500);
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è React —Å–æ—Å—Ç–æ—è–Ω–∏—è inputValue
    function updateReactInputState(element, value) {
        try {
            // –ò—â–µ–º React fiber
            const fiber = element._reactInternalFiber || 
                         element._reactInternalInstance ||
                         element[Object.keys(element).find(key => key.startsWith('__reactFiber'))];
            
            if (!fiber) return false;
            
            // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –¥–µ—Ä–µ–≤—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤–≤–µ—Ä—Ö
            let currentFiber = fiber;
            while (currentFiber) {
                // –ï—Å–ª–∏ —É fiber –µ—Å—Ç—å state –∏–ª–∏ hooks
                if (currentFiber.stateNode && currentFiber.stateNode.setState) {
                    // –≠—Ç–æ class component
                    if (currentFiber.stateNode.state && 'inputValue' in currentFiber.stateNode.state) {
                        currentFiber.stateNode.setState({ inputValue: value });
                        console.log('üéØ –û–±–Ω–æ–≤–ª–µ–Ω–æ state.inputValue –≤ class component');
                        return true;
                    }
                }
                
                // –ï—Å–ª–∏ —ç—Ç–æ functional component —Å hooks
                if (currentFiber.memoizedState) {
                    let hook = currentFiber.memoizedState;
                    let hookIndex = 0;
                    
                    while (hook) {
                        // –ï—Å–ª–∏ —ç—Ç–æ useState hook (–µ—Å—Ç—å queue —Å dispatch)
                        if (hook.queue && hook.queue.dispatch) {
                            // –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π useState (–æ–±—ã—á–Ω–æ —ç—Ç–æ inputValue)
                            if (hookIndex === 0) {
                                hook.queue.dispatch(value);
                                console.log('üéØ –û–±–Ω–æ–≤–ª–µ–Ω –ø–µ—Ä–≤—ã–π useState hook (inputValue)');
                                return true;
                            }
                        }
                        hook = hook.next;
                        hookIndex++;
                    }
                }
                
                currentFiber = currentFiber.return;
            }
            
            return false;
        } catch (e) {
            console.log('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è React —Å–æ—Å—Ç–æ—è–Ω–∏—è:', e);
            return false;
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –≤ React –ø–æ–ª–µ
    function simulateUserInput(element, value) {
        if (!element || !element.length) return;
        
        element.each(function() {
            const textarea = this;
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            textarea.value = value;
            
            // 0. –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å React —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
            const stateUpdated = updateReactInputState(textarea, value);
            if (stateUpdated) {
                console.log(`‚úÖ React —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è: "${value}"`);
                return; // –í—ã—Ö–æ–¥–∏–º, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
            }
            
            // 1. –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ React onChange —Ñ—É–Ω–∫—Ü–∏—é –≤ props
            let onChangeFound = false;
            
            // –ò—â–µ–º React props –≤ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
            const possibleKeys = Object.keys(textarea).filter(key => 
                key.startsWith('__reactProps') || 
                key.startsWith('__reactEventHandlers') ||
                key.startsWith('__reactInternalInstance')
            );
            
            for (let key of possibleKeys) {
                if (textarea[key] && textarea[key].onChange) {
                    console.log('üéØ –ù–∞–π–¥–µ–Ω–∞ React onChange —Ñ—É–Ω–∫—Ü–∏—è');
                    textarea[key].onChange({
                        target: { 
                            value: value,
                            name: textarea.name
                        },
                        currentTarget: textarea,
                        type: 'change'
                    });
                    onChangeFound = true;
                    break;
                }
            }
            
            // 2. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ onChange –≤ props, –∏—â–µ–º –≤ React fiber
            if (!onChangeFound) {
                const reactFiber = textarea._reactInternalFiber || 
                                  textarea._reactInternalInstance ||
                                  Object.keys(textarea).find(key => key.startsWith('__reactFiber')) && textarea[Object.keys(textarea).find(key => key.startsWith('__reactFiber'))];
                
                if (reactFiber && reactFiber.memoizedProps && reactFiber.memoizedProps.onChange) {
                    console.log('üéØ –ù–∞–π–¥–µ–Ω–∞ React onChange –≤ fiber');
                    reactFiber.memoizedProps.onChange({
                        target: { 
                            value: value,
                            name: textarea.name
                        },
                        currentTarget: textarea,
                        type: 'change'
                    });
                    onChangeFound = true;
                }
            }
            
            // 3. –ò—â–µ–º onChange –≤ —Å–æ–±—ã—Ç–∏—è—Ö —ç–ª–µ–º–µ–Ω—Ç–∞
            if (!onChangeFound && textarea._events && textarea._events.change) {
                console.log('üéØ –ù–∞–π–¥–µ–Ω–∞ onChange –≤ _events');
                textarea._events.change({ target: { value: value } });
                onChangeFound = true;
            }
            
            // 4. –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å React Hook —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
            if (!onChangeFound) {
                const reactFiber = textarea._reactInternalFiber || 
                                  textarea._reactInternalInstance ||
                                  Object.keys(textarea).find(key => key.startsWith('__reactFiber')) && textarea[Object.keys(textarea).find(key => key.startsWith('__reactFiber'))];
                
                if (reactFiber) {
                    let currentFiber = reactFiber;
                    while (currentFiber) {
                        if (currentFiber.memoizedState) {
                            let hook = currentFiber.memoizedState;
                            while (hook) {
                                if (hook.queue && hook.queue.dispatch && typeof hook.queue.dispatch === 'function') {
                                    console.log('üéØ –ù–∞–π–¥–µ–Ω useState hook, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
                                    hook.queue.dispatch(value);
                                    onChangeFound = true;
                                    break;
                                }
                                hook = hook.next;
                            }
                            if (onChangeFound) break;
                        }
                        currentFiber = currentFiber.return;
                    }
                }
            }
            
            // 5. –≠–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏ —Å–æ–±—ã—Ç–∏–π
            const nativeInputValueSetter = Object.getOwnPropertyDescriptor(window.HTMLTextAreaElement.prototype, 'value').set;
            nativeInputValueSetter.call(textarea, value);
            
            const inputEvent = new Event('input', { bubbles: true });
            const changeEvent = new Event('change', { bubbles: true });
            
            // –î–æ–±–∞–≤–ª—è–µ–º target.value –∫ —Å–æ–±—ã—Ç–∏—è–º
            Object.defineProperty(inputEvent, 'target', {
                writable: false,
                value: { value: value, name: textarea.name }
            });
            Object.defineProperty(changeEvent, 'target', {
                writable: false,
                value: { value: value, name: textarea.name }
            });
            
            // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ
            textarea.focus();
            
            // –î–∏—Å–ø–∞—Ç—á–∏–º —Å–æ–±—ã—Ç–∏—è
            textarea.dispatchEvent(inputEvent);
            textarea.dispatchEvent(changeEvent);
            
            // –£–±–∏—Ä–∞–µ–º —Ñ–æ–∫—É—Å
            textarea.blur();
            
            // –¢–∞–∫–∂–µ —á–µ—Ä–µ–∑ jQuery –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è
            $(textarea).val(value);
            $(textarea).trigger({
                type: 'input',
                target: { value: value, name: textarea.name }
            });
            $(textarea).trigger({
                type: 'change', 
                target: { value: value, name: textarea.name }
            });
            
            // 6. –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - —Å–∏–º—É–ª—è—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
            if (!onChangeFound) {
                console.log('üéØ –ü—Ä–æ–±—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞');
                
                // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –∏ —ç–º—É–ª–∏—Ä—É–µ–º –Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞
                textarea.value = '';
                textarea.focus();
                
                // –≠–º—É–ª–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –≤–≤–æ–¥ —Å–∏–º–≤–æ–ª–æ–≤
                for (let i = 0; i < value.length; i++) {
                    textarea.value += value[i];
                    const keyEvent = new KeyboardEvent('keydown', {
                        key: value[i],
                        bubbles: true,
                        cancelable: true
                    });
                    const inputEventChar = new Event('input', { bubbles: true });
                    
                    textarea.dispatchEvent(keyEvent);
                    textarea.dispatchEvent(inputEventChar);
                }
                
                // –§–∏–Ω–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
                textarea.dispatchEvent(new Event('change', { bubbles: true }));
                textarea.blur();
            }
            
            if (onChangeFound) {
                console.log(`‚úÖ React onChange –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è: "${value}"`);
            } else {
                console.log(`‚ö†Ô∏è React onChange –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Å–∏–º—É–ª—è—Ü–∏—è –≤–≤–æ–¥–∞ –¥–ª—è: "${value}"`);
            }
        });
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è textarea –ø–æ–ª–µ–π
    function fillTextareaFields(deliveryType, deliveryInfo = null) {
        console.log('üìù –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –¥–ª—è —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:', deliveryType);
        
        const sdekField = $('.wp-block-checkout-fields-for-blocks-textarea.sdek textarea');
        const managerField = $('.wp-block-checkout-fields-for-blocks-textarea.manag textarea');
        
        console.log('–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π –°–î–≠–ö:', sdekField.length);
        console.log('–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π –ú–µ–Ω–µ–¥–∂–µ—Ä:', managerField.length);
        
        if (deliveryType === 'manager') {
            window.currentDeliveryData.dostavka = '';
            window.currentDeliveryData.manager = '–î–æ—Å—Ç–∞–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º';
            
            // –≠–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
            simulateUserInput(sdekField, '');
            simulateUserInput(managerField, '–î–æ—Å—Ç–∞–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º');
            
        } else if (deliveryType === 'cdek') {
            let cdekText = '';
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ –°–î–≠–ö
            const selectedPoint = getSelectedCdekPoint();
            
            // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ DOM (–±–ª–æ–∫–∞ –∏—Ç–æ–≥–æ–≤)
            if (selectedPoint && selectedPoint.code === 'from_dom') {
                cdekText = selectedPoint.name;
                if (selectedPoint.price) {
                    cdekText += ' - ' + selectedPoint.price;
                }
                if (selectedPoint.address) {
                    cdekText += '\n–ê–¥—Ä–µ—Å: ' + selectedPoint.address;
                }
            } else {
                // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è deliveryInfo
                if (deliveryInfo && deliveryInfo.label) {
                    cdekText += deliveryInfo.label;
                }
                
                if (deliveryInfo && deliveryInfo.price) {
                    cdekText += ' - ' + deliveryInfo.price;
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É–Ω–∫—Ç–µ –°–î–≠–ö –µ—Å–ª–∏ –µ—Å—Ç—å
                if (selectedPoint) {
                    cdekText += '\n–ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏: ' + selectedPoint.name;
                    if (selectedPoint.address) {
                        cdekText += '\n–ê–¥—Ä–µ—Å: ' + selectedPoint.address;
                    }
                }
            }
            
            // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if (!cdekText.trim()) {
                cdekText = '–î–æ—Å—Ç–∞–≤–∫–∞ –°–î–≠–ö';
                
                // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ü–µ–Ω—É –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ DOM
                const deliveryCostElement = $('.wc-block-components-totals-item__value');
                deliveryCostElement.each(function() {
                    const costText = $(this).text().trim();
                    if (costText.includes('—Ä—É–±') && $(this).closest('.wc-block-components-totals-item').find('.wc-block-components-totals-item__description').length) {
                        cdekText += ' - ' + costText;
                        return false; // break
                    }
                });
            }
            
            console.log('üì¶ –ó–∞–ø–æ–ª–Ω—è–µ–º –°–î–≠–ö –ø–æ–ª–µ —Ç–µ–∫—Å—Ç–æ–º:', cdekText);
            
            window.currentDeliveryData.dostavka = cdekText;
            window.currentDeliveryData.manager = '';
            
            // –≠–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
            simulateUserInput(managerField, '');
            simulateUserInput(sdekField, cdekText);
        } else {
            console.log('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö');
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ –°–î–≠–ö
    function getSelectedCdekPoint() {
        try {
            // 1. –ü–†–ò–û–†–ò–¢–ï–¢: –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –±–ª–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ü–í–ó –≤ DOM (—Å–∞–º—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
            const shippingBlock = $('.wc-block-components-totals-shipping .wc-block-components-totals-item');
            if (shippingBlock.length) {
                console.log('üì¶ –ù–∞–π–¥–µ–Ω–æ –±–ª–æ–∫–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ DOM:', shippingBlock.length);
                let foundPoint = null;
                shippingBlock.each(function() {
                    const label = $(this).find('.wc-block-components-totals-item__label').text().trim();
                    const value = $(this).find('.wc-block-components-totals-item__value').text().trim();
                    const description = $(this).find('.wc-block-components-totals-item__description small').text().trim();
                    
                    console.log('üì¶ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫:', { label, value, description });
                    console.log('üì¶ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:');
                    console.log('  - label —ç–ª–µ–º–µ–Ω—Ç:', $(this).find('.wc-block-components-totals-item__label'));
                    console.log('  - value —ç–ª–µ–º–µ–Ω—Ç:', $(this).find('.wc-block-components-totals-item__value'));
                    console.log('  - description —ç–ª–µ–º–µ–Ω—Ç:', $(this).find('.wc-block-components-totals-item__description small'));
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ü–í–ó (—Å–æ–¥–µ—Ä–∂–∏—Ç –∞–¥—Ä–µ—Å —Å –†–æ—Å—Å–∏–µ–π)
                    if (description && description.includes('–†–æ—Å—Å–∏—è')) {
                        foundPoint = {
                            name: label,
                            price: value,
                            address: description,
                            code: 'from_dom'
                        };
                        console.log('üì¶ –ù–∞–π–¥–µ–Ω –ü–í–ó –≤ DOM:', foundPoint);
                        return false; // break –∏–∑ each
                    }
                });
                if (foundPoint) {
                    return foundPoint;
                }
            }
            
            // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫—Ä—ã—Ç—ã–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã
            const pointDataField = $('#cdek-selected-point-data');
            if (pointDataField.length && pointDataField.val()) {
                const pointData = JSON.parse(pointDataField.val());
                console.log('üì¶ –ü–æ–ª—É—á–µ–Ω –ü–í–ó –∏–∑ —Å–∫—Ä—ã—Ç–æ–≥–æ –ø–æ–ª—è:', pointData);
                return {
                    code: pointData.code,
                    name: pointData.name,
                    address: pointData.location && pointData.location.address ? pointData.location.address : '',
                    city: pointData.location && pointData.location.city ? pointData.location.city : ''
                };
            }
            
            // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
            const storedPoint = localStorage.getItem('selectedCdekPoint');
            if (storedPoint) {
                console.log('üì¶ –ü–æ–ª—É—á–µ–Ω –ü–í–ó –∏–∑ localStorage:', JSON.parse(storedPoint));
                return JSON.parse(storedPoint);
            }
            
            // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            if (window.selectedCdekPoint) {
                console.log('üì¶ –ü–æ–ª—É—á–µ–Ω –ü–í–ó –∏–∑ window.selectedCdekPoint:', window.selectedCdekPoint);
                return window.selectedCdekPoint;
            }
            
            return null;
        } catch (e) {
            console.log('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—É–Ω–∫—Ç–µ –°–î–≠–ö:', e);
            return null;
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    function getCurrentDeliveryType() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
        const discussSelected = $('#discuss_selected').val();
        if (discussSelected === '1') {
            return 'manager';
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É –¥–æ—Å—Ç–∞–≤–∫–∏
        const activeTab = $('.wc-block-checkout__shipping-method-option--selected');
        if (activeTab.length) {
            const titleText = activeTab.find('.wc-block-checkout__shipping-method-option-title').text();
            
            if (titleText.includes('–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º') || titleText.includes('–û–±—Å—É–¥–∏—Ç—å')) {
                return 'manager';
            } else if (titleText.includes('–°–î–≠–ö') || titleText.includes('–î–æ—Å—Ç–∞–≤–∫–∞')) {
                return 'cdek';
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏
        const selectedShipping = $('input[name^="radio-control-wc-shipping-method"]:checked');
        if (selectedShipping.length) {
            const shippingValue = selectedShipping.val();
            if (shippingValue && shippingValue.includes('cdek')) {
                return 'cdek';
            }
        }
        
        return null;
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç–∞–≤–∫–µ
    function getDeliveryInfo() {
        const activeTab = $('.wc-block-checkout__shipping-method-option--selected');
        if (activeTab.length) {
            const label = activeTab.find('.wc-block-checkout__shipping-method-option-title').text().trim();
            const priceElement = activeTab.find('.wc-block-formatted-money-amount');
            const price = priceElement.length ? priceElement.text().trim() : '';
            
            return {
                label: label,
                price: price,
                description: ''
            };
        }
        
        return null;
    }
    
    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π
    function updateTextareaFields() {
        console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º textarea –ø–æ–ª—è');
        
        const deliveryType = getCurrentDeliveryType();
        if (!deliveryType) {
            console.log('‚ùì –¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
            return;
        }
        
        console.log('üì¶ –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:', deliveryType);
        
        if (deliveryType === 'manager') {
            fillTextareaFields('manager');
        } else if (deliveryType === 'cdek') {
            const deliveryInfo = getDeliveryInfo();
            fillTextareaFields('cdek', deliveryInfo);
        }
    }
    
    // –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ –±–ª–æ–∫–µ –¥–æ—Å—Ç–∞–≤–∫–∏
    function observeShippingBlock() {
        const targetNode = document.querySelector('.wc-block-checkout__shipping-method, .wp-block-woocommerce-checkout-shipping-methods-block');
        
        if (targetNode) {
            const observer = new MutationObserver(function(mutationsList) {
                for (let mutation of mutationsList) {
                    if (mutation.type === 'childList' || mutation.type === 'attributes') {
                        console.log('üëÅÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–ª–æ–∫–µ –¥–æ—Å—Ç–∞–≤–∫–∏');
                        debouncedUpdate();
                        break;
                    }
                }
            });
            
            observer.observe(targetNode, {
                childList: true,
                subtree: true,
                attributes: true,
                attributeFilter: ['class', 'aria-checked', 'checked']
            });
            
            console.log('üëÅÔ∏è –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –±–ª–æ–∫–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
    }
    
    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ localStorage (–¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Å–∫—Ä–∏–ø—Ç–∞–º–∏)
    window.addEventListener('storage', function(e) {
        if (e.key === 'selectedCdekPoint') {
            console.log('üíæ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ localStorage, –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è');
            debouncedUpdate();
        }
    });
    
    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏
    $(document).on('change', 'input[name^="radio-control-wc-shipping-method"]', function() {
        console.log('üìª –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –¥–æ—Å—Ç–∞–≤–∫–∏');
        debouncedUpdate();
    });
    
    // –°–ª—É—à–∞–µ–º –∫–ª–∏–∫–∏ –ø–æ –æ–ø—Ü–∏—è–º –¥–æ—Å—Ç–∞–≤–∫–∏
    $(document).on('click', '.wc-block-checkout__shipping-method-option', function() {
        console.log('üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –æ–ø—Ü–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏');
        debouncedUpdate();
    });
    
    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–∫—Ä—ã—Ç—ã—Ö –ø–æ–ª—è—Ö –°–î–≠–ö
    $(document).on('DOMNodeInserted', function(e) {
        if (e.target.id === 'cdek-selected-point-data' || e.target.id === 'cdek-selected-point-code') {
            console.log('üì¶ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö –ü–í–ó –°–î–≠–ö');
            debouncedUpdate();
        }
    });
    
    // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ –±–ª–æ–∫–µ –∏—Ç–æ–≥–æ–≤ –∑–∞–∫–∞–∑–∞ (–≥–¥–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ü–í–ó)
    function observeTotalsBlock() {
        const totalsBlock = document.querySelector('.wc-block-components-totals-wrapper, .wc-block-checkout__totals-wrapper');
        if (totalsBlock) {
            const observer = new MutationObserver(function(mutationsList) {
                for (let mutation of mutationsList) {
                    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                    if (mutation.type === 'childList' || mutation.type === 'characterData') {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–ª–æ–∫–µ –¥–æ—Å—Ç–∞–≤–∫–∏
                        const target = mutation.target;
                        const isShippingRelated = target.closest && target.closest('.wc-block-components-totals-shipping') ||
                                                 target.classList && target.classList.contains('wc-block-components-totals-shipping') ||
                                                 target.querySelector && target.querySelector('.wc-block-components-totals-shipping');
                        
                        if (isShippingRelated) {
                            console.log('üì¶ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–ª–æ–∫–µ –¥–æ—Å—Ç–∞–≤–∫–∏');
                            debouncedUpdate();
                            continue;
                        }
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —É–∑–ª—ã
                        if (mutation.addedNodes) {
                            const addedNodes = Array.from(mutation.addedNodes);
                            const hasShippingInfo = addedNodes.some(node => 
                                node.nodeType === 1 && 
                                (node.classList && node.classList.contains('wc-block-components-totals-shipping') ||
                                 node.querySelector && node.querySelector('.wc-block-components-totals-shipping'))
                            );
                            
                            if (hasShippingInfo) {
                                console.log('üì¶ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ/–ü–í–ó –≤ –±–ª–æ–∫–µ –∏—Ç–æ–≥–æ–≤');
                                debouncedUpdate();
                            }
                        }
                    }
                }
            });
            
            observer.observe(totalsBlock, {
                childList: true,
                subtree: true,
                characterData: true,
                characterDataOldValue: true
            });
            
            console.log('üëÅÔ∏è –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –±–ª–æ–∫–æ–º –∏—Ç–æ–≥–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∑–∞ –±–ª–æ–∫–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏
        const shippingBlock = document.querySelector('.wc-block-components-totals-shipping');
        if (shippingBlock) {
            const shippingObserver = new MutationObserver(function(mutationsList) {
                for (let mutation of mutationsList) {
                    console.log('üì¶ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –±–ª–æ–∫–µ –¥–æ—Å—Ç–∞–≤–∫–∏, —Ç–∏–ø:', mutation.type);
                    debouncedUpdate();
                    break; // –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
                }
            });
            
            shippingObserver.observe(shippingBlock, {
                childList: true,
                subtree: true,
                characterData: true,
                attributes: true
            });
            
            console.log('üëÅÔ∏è –ü—Ä—è–º–æ–π –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –±–ª–æ–∫–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    setTimeout(function() {
        updateTextareaFields();
        observeShippingBlock();
        observeTotalsBlock();
        console.log('‚úÖ –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ (—Ç–æ–ª—å–∫–æ React —ç–º—É–ª—è—Ü–∏—è)');
    }, 1000);
    
    // –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    window.updateTextareaFields = updateTextareaFields;
    window.fillTextareaFields = fillTextareaFields;
    window.getCurrentDeliveryType = getCurrentDeliveryType;
    window.simulateUserInput = simulateUserInput;
    window.updateReactInputState = updateReactInputState;
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    window.testTextareaFill = function(value) {
        const managerField = $('.wp-block-checkout-fields-for-blocks-textarea.manag textarea');
        if (managerField.length) {
            simulateUserInput(managerField, value || '–¢–µ—Å—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è');
        } else {
            console.log('–ü–æ–ª–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }
    };
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    window.forceUpdateTextarea = function() {
        console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è...');
        updateTextareaFields();
    };
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ü–í–ó
    window.debugCdekPoint = function() {
        console.log('üîç –û—Ç–ª–∞–¥–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ü–í–ó:');
        console.log('- localStorage:', localStorage.getItem('selectedCdekPoint'));
        console.log('- window.selectedCdekPoint:', window.selectedCdekPoint);
        console.log('- —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ:', $('#cdek-selected-point-data').val());
        console.log('- –±–ª–æ–∫–∏ –∏—Ç–æ–≥–æ–≤:', $('.wc-block-components-totals-item').length);
        console.log('- –±–ª–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:', $('.wc-block-components-totals-shipping .wc-block-components-totals-item').length);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –≤ DOM
        $('.wc-block-components-totals-shipping .wc-block-components-totals-item').each(function(index) {
            const label = $(this).find('.wc-block-components-totals-item__label').text().trim();
            const value = $(this).find('.wc-block-components-totals-item__value').text().trim();
            const description = $(this).find('.wc-block-components-totals-item__description small').text().trim();
            console.log(`üì¶ –ë–ª–æ–∫ ${index + 1}:`, { label, value, description });
        });
        
        const point = getSelectedCdekPoint();
        console.log('- —Ä–µ–∑—É–ª—å—Ç–∞—Ç getSelectedCdekPoint():', point);
        
        const deliveryType = getCurrentDeliveryType();
        console.log('- —Ç–µ–∫—É—â–∏–π —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:', deliveryType);
    };
    
    console.log('üéØ –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ - —Ç–æ–ª—å–∫–æ —ç–º—É–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞');
});