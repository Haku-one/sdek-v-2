jQuery(document).ready(function($) {
    console.log('üîß –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ textarea –ø–æ–ª–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if (!window.currentDeliveryData) {
        window.currentDeliveryData = {
            dostavka: '',
            manager: ''
        };
        console.log('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏');
    } else {
        console.log('‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç:', window.currentDeliveryData);
    }
    
    // –î–µ–±–∞—É–Ω—Å–∏–Ω–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —á–∞—Å—Ç—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    let updateTimeout;
    function debouncedUpdate() {
        clearTimeout(updateTimeout);
        updateTimeout = setTimeout(updateTextareaFields, 500);
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä—ã—Ç—ã—Ö –ø–æ–ª–µ–π –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    function ensureHiddenFields() {
        const form = $('form.wc-block-checkout__form, form.checkout, form').first();
        
        // –î–ª—è –ø–ª–∞–≥–∏–Ω–∞ Checkout Fields for Blocks –Ω—É–∂–Ω—ã –ø–æ–ª—è —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏
        const fieldsToCreate = [
            { name: 'dostavka', metaName: '_meta_dostavka' },
            { name: 'manager', metaName: '_meta_manager' },
            { name: 'checkout_field_dostavka', metaName: 'checkout_field_dostavka' },
            { name: 'checkout_field_manager', metaName: 'checkout_field_manager' },
            { name: 'wc_checkout_field_dostavka', metaName: 'wc_checkout_field_dostavka' },
            { name: 'wc_checkout_field_manager', metaName: 'wc_checkout_field_manager' }
        ];
        
        fieldsToCreate.forEach(field => {
            if (!$(`input[name="${field.name}"]`).length && !$(`textarea[name="${field.name}"]`).length) {
                const hiddenField = $(`<input type="hidden" name="${field.name}" value="">`);
                form.append(hiddenField);
                console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ ${field.name}`);
            }
        });
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ
    function simulateTyping(element, text) {
        return new Promise((resolve) => {
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
            element.value = '';
            element.focus();
            
            let index = 0;
            const typeChar = () => {
                if (index < text.length) {
                    element.value += text[index];
                    
                    // –≠–º—É–ª–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
                    element.dispatchEvent(new KeyboardEvent('keydown', { bubbles: true, key: text[index] }));
                    element.dispatchEvent(new Event('input', { bubbles: true }));
                    element.dispatchEvent(new KeyboardEvent('keyup', { bubbles: true, key: text[index] }));
                    
                    index++;
                    setTimeout(typeChar, 10); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏
                } else {
                    element.dispatchEvent(new Event('change', { bubbles: true }));
                    element.blur();
                    resolve();
                }
            };
            
            setTimeout(typeChar, 50);
        });
    }
    
    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—è
    function fillField(field, value, useTypingSimulation = false) {
        if (!field.length) return;
        
        const currentValue = field.val();
        if (currentValue === value) {
            console.log('‚ÑπÔ∏è –ü–æ–ª–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:', value);
            return;
        }
        
        // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ —Å–∏–º—É–ª—è—Ü–∏—è –Ω–∞–±–æ—Ä–∞ –∏ —ç—Ç–æ –Ω–µ –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if (useTypingSimulation && value) {
            console.log('üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –Ω–∞–±–æ—Ä–∞ –¥–ª—è:', value);
            field.each(async function() {
                await simulateTyping(this, value);
            });
            return;
        }
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ
        field.val(value);
        
        // –≠–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        field.each(function() {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç
            const element = this;
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
            element.value = value;
            element.defaultValue = value;
            $(element).val(value);
            
            // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ
            element.setAttribute('data-dirty', 'true');
            element.setAttribute('data-filled', 'true');
            element.setAttribute('aria-invalid', 'false');
            
            // –ú–µ–Ω—è–µ–º placeholder –µ—Å–ª–∏ –æ–Ω "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"
            if (element.placeholder === '–ù–µ –≤—ã–±—Ä–∞–Ω–æ') {
                element.placeholder = '';
            }
            
            // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –æ—à–∏–±–æ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
            $(element).removeClass('has-error wc-invalid');
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–º–µ—á–∞–µ–º –ø–æ–ª–µ –∫–∞–∫ "touched" –¥–ª—è React —Ñ–æ—Ä–º
            if (element._valueTracker) {
                element._valueTracker.setValue('');
            }
            
            // –≠–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏–π –∫–∞–∫ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–º –≤–≤–æ–¥–µ
            const events = [
                new Event('focus', { bubbles: true, cancelable: true }),
                new Event('focusin', { bubbles: true, cancelable: true }),
                new KeyboardEvent('keydown', { bubbles: true, cancelable: true, key: 'a' }),
                new Event('input', { bubbles: true, cancelable: true }),
                new KeyboardEvent('keyup', { bubbles: true, cancelable: true, key: 'a' }),
                new Event('change', { bubbles: true, cancelable: true }),
                new Event('blur', { bubbles: true, cancelable: true }),
                new Event('focusout', { bubbles: true, cancelable: true })
            ];
            
            // –î–∏—Å–ø–∞—Ç—á–∏–º —Å–æ–±—ã—Ç–∏—è —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
            events.forEach((event, index) => {
                setTimeout(() => {
                    element.dispatchEvent(event);
                }, index * 10);
            });
        });
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ jQuery —Å–æ–±—ã—Ç–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        setTimeout(() => {
            field.trigger('focus').trigger('input').trigger('change').trigger('blur');
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ñ–æ—Ä–º—É
            const form = field.closest('form');
            if (form.length) {
                form.trigger('change');
            }
            
            // –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å React/WooCommerce –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
            field.each(function() {
                // –î–ª—è React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                const reactProps = Object.keys(this).find(key => key.startsWith('__reactProps'));
                if (reactProps && this[reactProps] && this[reactProps].onChange) {
                    this[reactProps].onChange({ target: { value: value } });
                }
                
                // –î–ª—è WooCommerce –±–ª–æ–∫–æ–≤ –∏ –ø–ª–∞–≥–∏–Ω–∞ Checkout Fields for Blocks
                if (window.wp && window.wp.data) {
                    try {
                        const checkoutStore = window.wp.data.dispatch('wc/store/checkout');
                        if (checkoutStore && checkoutStore.setExtensionData) {
                            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º metaName –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—è
                            let metaName = '';
                            if (this.className.includes('sdek') || this.name === 'dostavka') {
                                metaName = '_meta_dostavka';
                            } else if (this.className.includes('manag') || this.name === 'manager') {
                                metaName = '_meta_manager';
                            }
                            
                            if (metaName) {
                                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞–≥–∏–Ω–∞ Checkout Fields for Blocks
                                checkoutStore.setExtensionData('checkout-fields-for-blocks', metaName, value);
                                console.log(`‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ setExtensionData: ${metaName} = ${value}`);
                            }
                        }
                    } catch (e) {
                        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å WooCommerce store:', e);
                    }
                }
            });
        }, 100);
        
        console.log('‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ –∑–Ω–∞—á–µ–Ω–∏–µ–º:', value);
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è textarea –ø–æ–ª–µ–π
    function fillTextareaFields(deliveryType, deliveryInfo = null) {
        console.log('üìù –ó–∞–ø–æ–ª–Ω—è–µ–º textarea –ø–æ–ª—è –¥–ª—è —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:', deliveryType);
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Å–∫—Ä—ã—Ç—ã–µ –ø–æ–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        ensureHiddenFields();
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—è –ø–æ –∏–º–µ–Ω–∞–º –ø–æ–ª–µ–π
        const sdekField = $('textarea[name="dostavka"], input[name="dostavka"], .wp-block-checkout-fields-for-blocks-textarea.sdek textarea');
        const managerField = $('textarea[name="manager"], input[name="manager"], .wp-block-checkout-fields-for-blocks-textarea.manag textarea');
        
        console.log('–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π –°–î–≠–ö:', sdekField.length, sdekField);
        console.log('–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π –ú–µ–Ω–µ–¥–∂–µ—Ä:', managerField.length, managerField);
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—è—Ö
        sdekField.each(function(i) {
            console.log(`–°–î–≠–ö –ø–æ–ª–µ ${i}:`, this.name, this.type, $(this).attr('class'));
        });
        managerField.each(function(i) {
            console.log(`–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª–µ ${i}:`, this.name, this.type, $(this).attr('class'));
        });
        
        if (deliveryType === 'manager') {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            window.currentDeliveryData.dostavka = '';
            window.currentDeliveryData.manager = '–î–æ—Å—Ç–∞–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º';
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ API –ø–ª–∞–≥–∏–Ω–∞
            updateCheckoutFieldsForBlocksAPI();
            
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            fillField(sdekField, '');
            fillField(managerField, '–î–æ—Å—Ç–∞–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º', true);
            
        } else if (deliveryType === 'cdek' && deliveryInfo) {
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—è –°–î–≠–ö
            let cdekText = '';
            
            if (deliveryInfo.label) {
                cdekText += deliveryInfo.label;
            }
            
            if (deliveryInfo.price) {
                cdekText += ' - ' + deliveryInfo.price;
            }
            
            if (deliveryInfo.description) {
                cdekText += ' (' + deliveryInfo.description + ')';
            }
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ –°–î–≠–ö
            const selectedPoint = getSelectedCdekPoint();
            if (selectedPoint) {
                cdekText += '\n–ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏: ' + selectedPoint.name;
                if (selectedPoint.address) {
                    cdekText += '\n–ê–¥—Ä–µ—Å: ' + selectedPoint.address;
                }
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            window.currentDeliveryData.dostavka = cdekText;
            window.currentDeliveryData.manager = '';
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ API –ø–ª–∞–≥–∏–Ω–∞
            updateCheckoutFieldsForBlocksAPI();
            
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ –¥–æ—Å—Ç–∞–≤–∫–∏
            fillField(managerField, '');
            fillField(sdekField, cdekText, true);
        } else {
            console.log('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—è –Ω–µ –∏–∑–º–µ–Ω—è—é—Ç—Å—è');
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ –°–î–≠–ö
    function getSelectedCdekPoint() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
            const storedPoint = localStorage.getItem('selectedCdekPoint');
            if (storedPoint) {
                return JSON.parse(storedPoint);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
            if (window.selectedCdekPoint) {
                return window.selectedCdekPoint;
            }
            
            return null;
        } catch (e) {
            console.log('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—É–Ω–∫—Ç–µ –°–î–≠–ö:', e);
            return null;
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    function getCurrentDeliveryType() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
        const discussSelected = $('#discuss_selected').val();
        if (discussSelected === '1') {
            return 'manager';
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É –¥–æ—Å—Ç–∞–≤–∫–∏
        const activeTab = $('.wc-block-checkout__shipping-method-option--selected');
        if (activeTab.length) {
            const titleText = activeTab.find('.wc-block-checkout__shipping-method-option-title').text();
            
            if (titleText.includes('–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º') || titleText.includes('–û–±—Å—É–¥–∏—Ç—å')) {
                return 'manager';
            } else if (titleText.includes('–°–î–≠–ö') || titleText.includes('–î–æ—Å—Ç–∞–≤–∫–∞')) {
                return 'cdek';
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏
        const selectedShipping = $('input[name^="radio-control-wc-shipping-method"]:checked');
        if (selectedShipping.length) {
            const shippingValue = selectedShipping.val();
            if (shippingValue && shippingValue.includes('cdek')) {
                return 'cdek';
            }
        }
        
        return null;
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç–∞–≤–∫–µ –∏–∑ –±–ª–æ–∫–∞
    function getDeliveryInfo() {
        const shippingBlock = $('.wp-block-woocommerce-checkout-order-summary-shipping-block .wc-block-components-totals-item');
        
        if (shippingBlock.length) {
            const label = shippingBlock.find('.wc-block-components-totals-item__label').text().trim();
            const price = shippingBlock.find('.wc-block-components-totals-item__value').text().trim();
            const description = shippingBlock.find('.wc-block-components-totals-item__description').text().trim();
            
            return {
                label: label,
                price: price,
                description: description
            };
        }
        
        return null;
    }
    
    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π
    function updateTextareaFields() {
        const deliveryType = getCurrentDeliveryType();
        const deliveryInfo = getDeliveryInfo();
        
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ textarea –ø–æ–ª–µ–π. –¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:', deliveryType);
        
        if (deliveryType) {
            fillTextareaFields(deliveryType, deliveryInfo);
        } else {
            console.log('‚ö†Ô∏è –¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
        }
    }
    
    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –º–µ—Ç–æ–¥–∞—Ö –¥–æ—Å—Ç–∞–≤–∫–∏ (–±–ª–æ—á–Ω—ã–π —á–µ–∫–∞—É—Ç)
    $(document).on('change', 'input[name^="radio-control-wc-shipping-method"]', function() {
        console.log('üìª –ò–∑–º–µ–Ω–µ–Ω –º–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏ (–±–ª–æ—á–Ω—ã–π —á–µ–∫–∞—É—Ç)');
        debouncedUpdate();
    });
    
    // –°–ª—É—à–∞–µ–º –∫–ª–∏–∫–∏ –ø–æ –≤–∫–ª–∞–¥–∫–∞–º –¥–æ—Å—Ç–∞–≤–∫–∏
    $(document).on('click', '.wc-block-checkout__shipping-method-option', function() {
        console.log('üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –≤–∫–ª–∞–¥–∫–µ –¥–æ—Å—Ç–∞–≤–∫–∏');
        debouncedUpdate();
    });
    
    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º —á–µ–∫–∞—É—Ç–µ
    $(document).on('change', 'input[name^="shipping_method"]', function() {
        console.log('üìª –ò–∑–º–µ–Ω–µ–Ω –º–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏ (–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —á–µ–∫–∞—É—Ç)');
        debouncedUpdate();
    });
    
    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ–∫–∞—É—Ç–∞
    $(document).on('updated_checkout checkout_updated', function() {
        console.log('üîÑ –°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ–∫–∞—É—Ç–∞');
        debouncedUpdate();
    });
    
    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–ª–æ–∫–µ –¥–æ—Å—Ç–∞–≤–∫–∏
    function observeShippingBlock() {
        const shippingBlock = document.querySelector('.wp-block-woocommerce-checkout-order-summary-shipping-block');
        
        if (shippingBlock) {
            const observer = new MutationObserver(function(mutations) {
                let shouldUpdate = false;
                
                mutations.forEach(function(mutation) {
                    if (mutation.type === 'childList' || 
                        mutation.type === 'characterData' || 
                        (mutation.type === 'attributes' && mutation.attributeName === 'class')) {
                        shouldUpdate = true;
                    }
                });
                
                if (shouldUpdate) {
                    console.log('üëÅÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–ª–æ–∫–µ –¥–æ—Å—Ç–∞–≤–∫–∏');
                    debouncedUpdate();
                }
            });
            
            observer.observe(shippingBlock, {
                childList: true,
                subtree: true,
                characterData: true,
                attributes: true,
                attributeFilter: ['class']
            });
            
            console.log('üëÅÔ∏è –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –±–ª–æ–∫–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
        } else {
            // –ï—Å–ª–∏ –±–ª–æ–∫ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ
            setTimeout(observeShippingBlock, 1000);
        }
    }
    
    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ localStorage (–¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Å–∫—Ä–∏–ø—Ç–∞–º–∏)
    window.addEventListener('storage', function(e) {
        if (e.key === 'selectedCdekPoint') {
            console.log('üíæ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ localStorage, –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è');
            debouncedUpdate();
        }
    });
    
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    window.currentDeliveryData = {
        dostavka: '',
        manager: ''
    };
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    function interceptFormSubmission() {
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ñ–æ—Ä–º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        $(document).on('submit', 'form', function(e) {
            console.log('üì§ –ü–µ—Ä–µ—Ö–≤–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã');
            console.log('üéØ –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏:', window.currentDeliveryData);
            
            // –ù–∞—Ö–æ–¥–∏–º –í–°–ï –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω—ã —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π
            const allFields = $('input, textarea, select').filter(function() {
                const name = this.name || '';
                const id = this.id || '';
                const className = this.className || '';
                
                return name.includes('dostavka') || name.includes('manager') || 
                       id.includes('dostavka') || id.includes('manager') ||
                       className.includes('sdek') || className.includes('manag');
            });
            
            console.log('üîç –ù–∞–π–¥–µ–Ω–æ –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ–π:', allFields.length);
            allFields.each(function(i) {
                console.log(`–ü–æ–ª–µ ${i}:`, this.name, this.id, this.value, this.className);
            });
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
            const dostavkaField = $('textarea[name="dostavka"], input[name="dostavka"]');
            const managerField = $('textarea[name="manager"], input[name="manager"]');
            
            if (window.currentDeliveryData.dostavka) {
                dostavkaField.val(window.currentDeliveryData.dostavka);
                console.log('üìù –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ dostavka:', window.currentDeliveryData.dostavka);
            }
            
            if (window.currentDeliveryData.manager) {
                managerField.val(window.currentDeliveryData.manager);
                console.log('üìù –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ manager:', window.currentDeliveryData.manager);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
            console.log('üìã –ò—Ç–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π:');
            allFields.each(function() {
                if (this.value) {
                    console.log(`${this.name || this.id}: ${this.value}`);
                }
            });
        });
        
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º AJAX –æ—Ç–ø—Ä–∞–≤–∫–∏ WooCommerce
        $(document).ajaxSend(function(event, xhr, settings) {
            if (settings.url && (settings.url.includes('wc-store/checkout') || settings.url.includes('checkout'))) {
                console.log('üì§ –ü–µ—Ä–µ—Ö–≤–∞—Ç AJAX –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞—É—Ç–∞');
                console.log('üåê URL:', settings.url);
                console.log('üì¶ –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', settings.data);
                console.log('üéØ –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏:', window.currentDeliveryData);
                
                // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                if (settings.data) {
                    try {
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                        const originalData = settings.data;
                        let modifiedData = settings.data;
                        
                        if (typeof settings.data === 'string') {
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ JSON
                            if (settings.data.trim().startsWith('{')) {
                                try {
                                    const jsonData = JSON.parse(settings.data);
                                    
                                    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ JSON
                                    if (window.currentDeliveryData.dostavka) {
                                        jsonData.dostavka = window.currentDeliveryData.dostavka;
                                        jsonData._meta_dostavka = window.currentDeliveryData.dostavka;
                                        jsonData.meta_dostavka = window.currentDeliveryData.dostavka;
                                    }
                                    
                                    if (window.currentDeliveryData.manager) {
                                        jsonData.manager = window.currentDeliveryData.manager;
                                        jsonData._meta_manager = window.currentDeliveryData.manager;
                                        jsonData.meta_manager = window.currentDeliveryData.manager;
                                    }
                                    
                                    modifiedData = JSON.stringify(jsonData);
                                    console.log('üìù –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω JSON:', modifiedData);
                                } catch (jsonError) {
                                    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ form data');
                                }
                            }
                            
                            // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ JSON, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ form data
                            if (modifiedData === settings.data) {
                                try {
                                    const formData = new URLSearchParams(settings.data);
                                    
                                    if (window.currentDeliveryData.dostavka) {
                                        formData.set('dostavka', window.currentDeliveryData.dostavka);
                                        formData.set('_meta_dostavka', window.currentDeliveryData.dostavka);
                                        formData.set('meta_dostavka', window.currentDeliveryData.dostavka);
                                    }
                                    
                                    if (window.currentDeliveryData.manager) {
                                        formData.set('manager', window.currentDeliveryData.manager);
                                        formData.set('_meta_manager', window.currentDeliveryData.manager);
                                        formData.set('meta_manager', window.currentDeliveryData.manager);
                                    }
                                    
                                    modifiedData = formData.toString();
                                    console.log('üìù –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω form data:', modifiedData);
                                } catch (formError) {
                                    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ form data, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å');
                                    modifiedData = settings.data;
                                }
                            }
                        } else if (typeof settings.data === 'object') {
                            // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–∞
                            modifiedData = { ...settings.data };
                            
                            if (window.currentDeliveryData.dostavka) {
                                modifiedData.dostavka = window.currentDeliveryData.dostavka;
                                modifiedData._meta_dostavka = window.currentDeliveryData.dostavka;
                                modifiedData.meta_dostavka = window.currentDeliveryData.dostavka;
                            }
                            
                            if (window.currentDeliveryData.manager) {
                                modifiedData.manager = window.currentDeliveryData.manager;
                                modifiedData._meta_manager = window.currentDeliveryData.manager;
                                modifiedData.meta_manager = window.currentDeliveryData.manager;
                            }
                            
                            console.log('üìù –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –æ–±—ä–µ–∫—Ç:', modifiedData);
                        }
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
                        if (modifiedData !== settings.data) {
                            settings.data = modifiedData;
                            console.log('‚úÖ AJAX –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã');
                        }
                        
                    } catch (e) {
                        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ AJAX –¥–∞–Ω–Ω—ã—Ö:', e);
                        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                        console.log('üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ AJAX –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π');
                    }
                    
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                    if (settings.data && typeof settings.data === 'string') {
                        try {
                            // –ï—Å–ª–∏ —ç—Ç–æ JSON, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω –≤–∞–ª–∏–¥–Ω—ã–π
                            if (settings.data.trim().startsWith('{')) {
                                JSON.parse(settings.data);
                                console.log('‚úÖ AJAX JSON –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã');
                            }
                        } catch (jsonError) {
                            console.log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ AJAX JSON –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º...');
                            // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                            if (originalData) {
                                settings.data = originalData;
                                console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ AJAX –¥–∞–Ω–Ω—ã–µ');
                            }
                        }
                    }
                }
            }
        });
        
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º Fetch API (–¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
        const originalFetch = window.fetch;
        window.fetch = function(...args) {
            const [url, options] = args;
            
            if (url && (url.includes('wc-store/checkout') || url.includes('checkout'))) {
                console.log('üì§ –ü–µ—Ä–µ—Ö–≤–∞—Ç Fetch –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞—É—Ç–∞');
                console.log('üåê URL:', url);
                console.log('üì¶ –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', options?.body);
                console.log('üéØ –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏:', window.currentDeliveryData);
                
                if (options && options.body) {
                    try {
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                        const originalBody = options.body;
                        let modifiedBody = options.body;
                        
                        if (typeof options.body === 'string') {
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ JSON
                            if (options.body.trim().startsWith('{')) {
                                try {
                                    const jsonData = JSON.parse(options.body);
                                    
                                    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ JSON
                                    if (window.currentDeliveryData.dostavka) {
                                        jsonData.dostavka = window.currentDeliveryData.dostavka;
                                        jsonData._meta_dostavka = window.currentDeliveryData.dostavka;
                                        jsonData.meta_dostavka = window.currentDeliveryData.dostavka;
                                    }
                                    
                                    if (window.currentDeliveryData.manager) {
                                        jsonData.manager = window.currentDeliveryData.manager;
                                        jsonData._meta_manager = window.currentDeliveryData.manager;
                                        jsonData.meta_manager = window.currentDeliveryData.manager;
                                    }
                                    
                                    modifiedBody = JSON.stringify(jsonData);
                                    console.log('üìù –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω JSON:', modifiedBody);
                                } catch (jsonError) {
                                    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ form data');
                                }
                            }
                            
                            // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ JSON, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ form data
                            if (modifiedBody === options.body) {
                                try {
                                    const formData = new URLSearchParams(options.body);
                                    
                                    if (window.currentDeliveryData.dostavka) {
                                        formData.set('dostavka', window.currentDeliveryData.dostavka);
                                        formData.set('_meta_dostavka', window.currentDeliveryData.dostavka);
                                        formData.set('meta_dostavka', window.currentDeliveryData.dostavka);
                                    }
                                    
                                    if (window.currentDeliveryData.manager) {
                                        formData.set('manager', window.currentDeliveryData.manager);
                                        formData.set('_meta_manager', window.currentDeliveryData.manager);
                                        formData.set('meta_manager', window.currentDeliveryData.manager);
                                    }
                                    
                                    modifiedBody = formData.toString();
                                    console.log('üìù –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω form data:', modifiedBody);
                                } catch (formError) {
                                    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ form data, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å');
                                    modifiedBody = options.body;
                                }
                            }
                        } else if (options.body instanceof FormData) {
                            // –ï—Å–ª–∏ —ç—Ç–æ FormData
                            const formData = new FormData();
                            
                            // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                            for (let [key, value] of options.body.entries()) {
                                formData.append(key, value);
                            }
                            
                            // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏
                            if (window.currentDeliveryData.dostavka) {
                                formData.append('dostavka', window.currentDeliveryData.dostavka);
                                formData.append('_meta_dostavka', window.currentDeliveryData.dostavka);
                                formData.append('meta_dostavka', window.currentDeliveryData.dostavka);
                            }
                            
                            if (window.currentDeliveryData.manager) {
                                formData.append('manager', window.currentDeliveryData.manager);
                                formData.append('_meta_manager', window.currentDeliveryData.manager);
                                formData.append('meta_manager', window.currentDeliveryData.manager);
                            }
                            
                            modifiedBody = formData;
                            console.log('üìù –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω FormData');
                        }
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º body —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
                        if (modifiedBody !== options.body) {
                            options.body = modifiedBody;
                            console.log('‚úÖ Fetch –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã');
                        }
                        
                    } catch (e) {
                        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ Fetch –¥–∞–Ω–Ω—ã—Ö:', e);
                        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                        console.log('üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π');
                    }
                    
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                    if (options.body && typeof options.body === 'string') {
                        try {
                            // –ï—Å–ª–∏ —ç—Ç–æ JSON, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω –≤–∞–ª–∏–¥–Ω—ã–π
                            if (options.body.trim().startsWith('{')) {
                                JSON.parse(options.body);
                                console.log('‚úÖ JSON –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã');
                            }
                        } catch (jsonError) {
                            console.log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ JSON –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º...');
                            // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                            if (originalBody) {
                                options.body = originalBody;
                                console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
                            }
                        }
                    }
                }
            }
            
            return originalFetch.apply(this, args);
        };
    }
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞–≥–∏–Ω–æ–º Checkout Fields for Blocks
    function handleCheckoutFieldsForBlocks() {
        // –ò—â–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –ø–ª–∞–≥–∏–Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã
        const checkoutFieldsContainer = $('.wp-block-checkout-fields-for-blocks-textarea');
        
        if (checkoutFieldsContainer.length) {
            console.log('üîç –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Checkout Fields for Blocks');
            
            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            checkoutFieldsContainer.each(function() {
                const reactFiber = this._reactInternalFiber || this._reactInternalInstance;
                if (reactFiber) {
                    console.log('‚öõÔ∏è –ù–∞–π–¥–µ–Ω React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç');
                }
            });
        }
        
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–ª–∞–≥–∏–Ω–∞
        $(document).on('change input', '.wp-block-checkout-fields-for-blocks-textarea textarea', function() {
            console.log('üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –ø–æ–ª–µ Checkout Fields for Blocks:', this.value);
        });
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞–ø—Ä—è–º—É—é —Å API –ø–ª–∞–≥–∏–Ω–∞ Checkout Fields for Blocks
    function updateCheckoutFieldsForBlocksAPI() {
        if (!window.wp || !window.wp.data) {
            console.log('‚ö†Ô∏è WP Data API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            return;
        }
        
        try {
            const checkoutStore = window.wp.data.dispatch('wc/store/checkout');
            if (!checkoutStore) {
                console.log('‚ö†Ô∏è Checkout store –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å setExtensionData
            if (typeof checkoutStore.setExtensionData === 'function') {
                console.log('‚úÖ setExtensionData –¥–æ—Å—Ç—É–ø–µ–Ω');
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API –ø–ª–∞–≥–∏–Ω–∞
                if (window.currentDeliveryData && window.currentDeliveryData.dostavka) {
                    try {
                        // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –¥–∞–Ω–Ω—ã–µ - —Å—Ç—Ä–æ–∫–∞
                        const dostavkaValue = String(window.currentDeliveryData.dostavka);
                        checkoutStore.setExtensionData('checkout-fields-for-blocks', '_meta_dostavka', dostavkaValue);
                        console.log('üîÑ API: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ _meta_dostavka =', dostavkaValue);
                    } catch (e) {
                        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ _meta_dostavka:', e);
                    }
                }
                
                if (window.currentDeliveryData && window.currentDeliveryData.manager) {
                    try {
                        // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –¥–∞–Ω–Ω—ã–µ - —Å—Ç—Ä–æ–∫–∞
                        const managerValue = String(window.currentDeliveryData.manager);
                        checkoutStore.setExtensionData('checkout-fields-for-blocks', '_meta_manager', managerValue);
                        console.log('üîÑ API: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ _meta_manager =', managerValue);
                    } catch (e) {
                        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ _meta_manager:', e);
                    }
                }
                
                // –¢–∞–∫–∂–µ –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏–º–µ–Ω–∞
                const fieldMappings = [
                    { key: 'dostavka', value: window.currentDeliveryData?.dostavka },
                    { key: 'manager', value: window.currentDeliveryData?.manager }
                ];
                
                fieldMappings.forEach(field => {
                    if (field.value) {
                        try {
                            // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –¥–∞–Ω–Ω—ã–µ - —Å—Ç—Ä–æ–∫–∞
                            const fieldValue = String(field.value);
                            checkoutStore.setExtensionData('checkout-fields-for-blocks', field.key, fieldValue);
                            console.log(`üîÑ API: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${field.key} =`, fieldValue);
                        } catch (e) {
                            console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ${field.key}:`, e);
                        }
                    }
                });
            } else {
                console.log('‚ö†Ô∏è setExtensionData –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã');
                
                // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - —á–µ—Ä–µ–∑ DOM —Å–æ–±—ã—Ç–∏—è
                const textareas = $('.wp-block-checkout-fields-for-blocks-textarea textarea');
                textareas.each(function() {
                    const textarea = this;
                    const container = $(textarea).closest('.wp-block-checkout-fields-for-blocks-textarea');
                    
                    let value = '';
                    
                    if (container.hasClass('sdek') && window.currentDeliveryData?.dostavka) {
                        value = window.currentDeliveryData.dostavka;
                    } else if (container.hasClass('manag') && window.currentDeliveryData?.manager) {
                        value = window.currentDeliveryData.manager;
                    }
                    
                    if (value && textarea.value !== value) {
                        textarea.value = value;
                        textarea.dispatchEvent(new Event('input', { bubbles: true }));
                        textarea.dispatchEvent(new Event('change', { bubbles: true }));
                        console.log(`üîÑ DOM: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ ${value}`);
                    }
                });
            }
            
        } catch (e) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ API:', e);
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π —á–µ—Ä–µ–∑ DOM —Å–æ–±—ã—Ç–∏—è
    function forceUpdateCheckoutFields() {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ API
        updateCheckoutFieldsForBlocksAPI();
        
        // –ó–∞—Ç–µ–º —á–µ—Ä–µ–∑ DOM
        const textareas = $('.wp-block-checkout-fields-for-blocks-textarea textarea');
        
        textareas.each(function() {
            const textarea = this;
            const container = $(textarea).closest('.wp-block-checkout-fields-for-blocks-textarea');
            
            let value = '';
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å
            if (container.hasClass('sdek')) {
                value = window.currentDeliveryData.dostavka || '';
            } else if (container.hasClass('manag')) {
                value = window.currentDeliveryData.manager || '';
            }
            
            if (value && textarea.value !== value) {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏ —ç–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
                textarea.value = value;
                
                // –°–æ–∑–¥–∞–µ–º –∏ –¥–∏—Å–ø–∞—Ç—á–∏–º —Å–æ–±—ã—Ç–∏—è
                const inputEvent = new Event('input', { bubbles: true, cancelable: true });
                const changeEvent = new Event('change', { bubbles: true, cancelable: true });
                
                textarea.dispatchEvent(inputEvent);
                textarea.dispatchEvent(changeEvent);
                
                // –¢–∞–∫–∂–µ —á–µ—Ä–µ–∑ jQuery
                $(textarea).trigger('input').trigger('change');
                
                console.log(`üîÑ DOM: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª–µ: ${value}`);
            }
        });
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    setTimeout(function() {
        try {
            ensureHiddenFields(); // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—è —Å—Ä–∞–∑—É –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            interceptFormSubmission(); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
            handleCheckoutFieldsForBlocks(); // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞–≥–∏–Ω–∞
            updateTextareaFields();
            observeShippingBlock();
            console.log('‚úÖ –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ textarea –ø–æ–ª–µ–π –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:', error);
        }
    }, 1000);
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
    setInterval(forceUpdateCheckoutFields, 2000);
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –º–æ–∂–µ—Ç –º–µ—à–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö
    // setInterval(function() {
    //     if ($('.wp-block-woocommerce-checkout').length) {
    //         updateTextareaFields();
    //     }
    // }, 10000);
    
    // –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    window.updateTextareaFields = updateTextareaFields;
    window.fillTextareaFields = fillTextareaFields;
    window.getCurrentDeliveryType = getCurrentDeliveryType;
    
    console.log('üéØ –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ textarea –ø–æ–ª–µ–π –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
});