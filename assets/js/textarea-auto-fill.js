jQuery(document).ready(function($) {
    console.log('üîß –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ textarea –ø–æ–ª–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    
    // –î–µ–±–∞—É–Ω—Å–∏–Ω–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —á–∞—Å—Ç—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    let updateTimeout;
    function debouncedUpdate() {
        clearTimeout(updateTimeout);
        updateTimeout = setTimeout(updateTextareaFields, 500);
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä—ã—Ç—ã—Ö –ø–æ–ª–µ–π –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    function ensureHiddenFields() {
        const form = $('form.wc-block-checkout__form, form.checkout, form').first();
        
        if (!$('input[name="dostavka"]').length && !$('textarea[name="dostavka"]').length) {
            const hiddenDostavka = $('<input type="hidden" name="dostavka" value="">');
            form.append(hiddenDostavka);
            console.log('‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ dostavka');
        }
        
        if (!$('input[name="manager"]').length && !$('textarea[name="manager"]').length) {
            const hiddenManager = $('<input type="hidden" name="manager" value="">');
            form.append(hiddenManager);
            console.log('‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ manager');
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ
    function simulateTyping(element, text) {
        return new Promise((resolve) => {
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
            element.value = '';
            element.focus();
            
            let index = 0;
            const typeChar = () => {
                if (index < text.length) {
                    element.value += text[index];
                    
                    // –≠–º—É–ª–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
                    element.dispatchEvent(new KeyboardEvent('keydown', { bubbles: true, key: text[index] }));
                    element.dispatchEvent(new Event('input', { bubbles: true }));
                    element.dispatchEvent(new KeyboardEvent('keyup', { bubbles: true, key: text[index] }));
                    
                    index++;
                    setTimeout(typeChar, 10); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏
                } else {
                    element.dispatchEvent(new Event('change', { bubbles: true }));
                    element.blur();
                    resolve();
                }
            };
            
            setTimeout(typeChar, 50);
        });
    }
    
    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—è
    function fillField(field, value, useTypingSimulation = false) {
        if (!field.length) return;
        
        const currentValue = field.val();
        if (currentValue === value) {
            console.log('‚ÑπÔ∏è –ü–æ–ª–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:', value);
            return;
        }
        
        // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ —Å–∏–º—É–ª—è—Ü–∏—è –Ω–∞–±–æ—Ä–∞ –∏ —ç—Ç–æ –Ω–µ –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if (useTypingSimulation && value) {
            console.log('üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –Ω–∞–±–æ—Ä–∞ –¥–ª—è:', value);
            field.each(async function() {
                await simulateTyping(this, value);
            });
            return;
        }
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ
        field.val(value);
        
        // –≠–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        field.each(function() {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç
            const element = this;
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
            element.value = value;
            element.defaultValue = value;
            $(element).val(value);
            
            // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ
            element.setAttribute('data-dirty', 'true');
            element.setAttribute('data-filled', 'true');
            element.setAttribute('aria-invalid', 'false');
            
            // –ú–µ–Ω—è–µ–º placeholder –µ—Å–ª–∏ –æ–Ω "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"
            if (element.placeholder === '–ù–µ –≤—ã–±—Ä–∞–Ω–æ') {
                element.placeholder = '';
            }
            
            // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –æ—à–∏–±–æ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
            $(element).removeClass('has-error wc-invalid');
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–º–µ—á–∞–µ–º –ø–æ–ª–µ –∫–∞–∫ "touched" –¥–ª—è React —Ñ–æ—Ä–º
            if (element._valueTracker) {
                element._valueTracker.setValue('');
            }
            
            // –≠–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏–π –∫–∞–∫ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–º –≤–≤–æ–¥–µ
            const events = [
                new Event('focus', { bubbles: true, cancelable: true }),
                new Event('focusin', { bubbles: true, cancelable: true }),
                new KeyboardEvent('keydown', { bubbles: true, cancelable: true, key: 'a' }),
                new Event('input', { bubbles: true, cancelable: true }),
                new KeyboardEvent('keyup', { bubbles: true, cancelable: true, key: 'a' }),
                new Event('change', { bubbles: true, cancelable: true }),
                new Event('blur', { bubbles: true, cancelable: true }),
                new Event('focusout', { bubbles: true, cancelable: true })
            ];
            
            // –î–∏—Å–ø–∞—Ç—á–∏–º —Å–æ–±—ã—Ç–∏—è —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
            events.forEach((event, index) => {
                setTimeout(() => {
                    element.dispatchEvent(event);
                }, index * 10);
            });
        });
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ jQuery —Å–æ–±—ã—Ç–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        setTimeout(() => {
            field.trigger('focus').trigger('input').trigger('change').trigger('blur');
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ñ–æ—Ä–º—É
            const form = field.closest('form');
            if (form.length) {
                form.trigger('change');
            }
            
            // –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å React/WooCommerce –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
            field.each(function() {
                // –î–ª—è React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                const reactProps = Object.keys(this).find(key => key.startsWith('__reactProps'));
                if (reactProps && this[reactProps] && this[reactProps].onChange) {
                    this[reactProps].onChange({ target: { value: value } });
                }
                
                // –î–ª—è WooCommerce –±–ª–æ–∫–æ–≤
                if (window.wp && window.wp.data) {
                    try {
                        const checkoutStore = window.wp.data.dispatch('wc/store/checkout');
                        if (checkoutStore && checkoutStore.setExtensionData) {
                            const fieldName = this.name || (this.className.includes('sdek') ? 'dostavka' : 'manager');
                            checkoutStore.setExtensionData('checkout-fields', {
                                [fieldName]: value
                            });
                        }
                    } catch (e) {
                        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å WooCommerce store:', e);
                    }
                }
            });
        }, 100);
        
        console.log('‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ –∑–Ω–∞—á–µ–Ω–∏–µ–º:', value);
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è textarea –ø–æ–ª–µ–π
    function fillTextareaFields(deliveryType, deliveryInfo = null) {
        console.log('üìù –ó–∞–ø–æ–ª–Ω—è–µ–º textarea –ø–æ–ª—è –¥–ª—è —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:', deliveryType);
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Å–∫—Ä—ã—Ç—ã–µ –ø–æ–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        ensureHiddenFields();
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—è –ø–æ –∏–º–µ–Ω–∞–º –ø–æ–ª–µ–π
        const sdekField = $('textarea[name="dostavka"], input[name="dostavka"], .wp-block-checkout-fields-for-blocks-textarea.sdek textarea');
        const managerField = $('textarea[name="manager"], input[name="manager"], .wp-block-checkout-fields-for-blocks-textarea.manag textarea');
        
        console.log('–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π –°–î–≠–ö:', sdekField.length, sdekField);
        console.log('–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π –ú–µ–Ω–µ–¥–∂–µ—Ä:', managerField.length, managerField);
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—è—Ö
        sdekField.each(function(i) {
            console.log(`–°–î–≠–ö –ø–æ–ª–µ ${i}:`, this.name, this.type, $(this).attr('class'));
        });
        managerField.each(function(i) {
            console.log(`–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª–µ ${i}:`, this.name, this.type, $(this).attr('class'));
        });
        
        if (deliveryType === 'manager') {
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            fillField(sdekField, '');
            fillField(managerField, '–î–æ—Å—Ç–∞–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º', true); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –Ω–∞–±–æ—Ä–∞
            
        } else if (deliveryType === 'cdek' && deliveryInfo) {
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—è –°–î–≠–ö
            let cdekText = '';
            
            if (deliveryInfo.label) {
                cdekText += deliveryInfo.label;
            }
            
            if (deliveryInfo.price) {
                cdekText += ' - ' + deliveryInfo.price;
            }
            
            if (deliveryInfo.description) {
                cdekText += ' (' + deliveryInfo.description + ')';
            }
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ –°–î–≠–ö
            const selectedPoint = getSelectedCdekPoint();
            if (selectedPoint) {
                cdekText += '\n–ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏: ' + selectedPoint.name;
                if (selectedPoint.address) {
                    cdekText += '\n–ê–¥—Ä–µ—Å: ' + selectedPoint.address;
                }
            }
            
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ –¥–æ—Å—Ç–∞–≤–∫–∏
            fillField(managerField, '');
            fillField(sdekField, cdekText, true); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –Ω–∞–±–æ—Ä–∞
        } else {
            console.log('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—è –Ω–µ –∏–∑–º–µ–Ω—è—é—Ç—Å—è');
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ –°–î–≠–ö
    function getSelectedCdekPoint() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
            const storedPoint = localStorage.getItem('selectedCdekPoint');
            if (storedPoint) {
                return JSON.parse(storedPoint);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
            if (window.selectedCdekPoint) {
                return window.selectedCdekPoint;
            }
            
            return null;
        } catch (e) {
            console.log('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—É–Ω–∫—Ç–µ –°–î–≠–ö:', e);
            return null;
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    function getCurrentDeliveryType() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
        const discussSelected = $('#discuss_selected').val();
        if (discussSelected === '1') {
            return 'manager';
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É –¥–æ—Å—Ç–∞–≤–∫–∏
        const activeTab = $('.wc-block-checkout__shipping-method-option--selected');
        if (activeTab.length) {
            const titleText = activeTab.find('.wc-block-checkout__shipping-method-option-title').text();
            
            if (titleText.includes('–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º') || titleText.includes('–û–±—Å—É–¥–∏—Ç—å')) {
                return 'manager';
            } else if (titleText.includes('–°–î–≠–ö') || titleText.includes('–î–æ—Å—Ç–∞–≤–∫–∞')) {
                return 'cdek';
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏
        const selectedShipping = $('input[name^="radio-control-wc-shipping-method"]:checked');
        if (selectedShipping.length) {
            const shippingValue = selectedShipping.val();
            if (shippingValue && shippingValue.includes('cdek')) {
                return 'cdek';
            }
        }
        
        return null;
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç–∞–≤–∫–µ –∏–∑ –±–ª–æ–∫–∞
    function getDeliveryInfo() {
        const shippingBlock = $('.wp-block-woocommerce-checkout-order-summary-shipping-block .wc-block-components-totals-item');
        
        if (shippingBlock.length) {
            const label = shippingBlock.find('.wc-block-components-totals-item__label').text().trim();
            const price = shippingBlock.find('.wc-block-components-totals-item__value').text().trim();
            const description = shippingBlock.find('.wc-block-components-totals-item__description').text().trim();
            
            return {
                label: label,
                price: price,
                description: description
            };
        }
        
        return null;
    }
    
    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π
    function updateTextareaFields() {
        const deliveryType = getCurrentDeliveryType();
        const deliveryInfo = getDeliveryInfo();
        
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ textarea –ø–æ–ª–µ–π. –¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:', deliveryType);
        
        if (deliveryType) {
            fillTextareaFields(deliveryType, deliveryInfo);
        } else {
            console.log('‚ö†Ô∏è –¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
        }
    }
    
    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –º–µ—Ç–æ–¥–∞—Ö –¥–æ—Å—Ç–∞–≤–∫–∏ (–±–ª–æ—á–Ω—ã–π —á–µ–∫–∞—É—Ç)
    $(document).on('change', 'input[name^="radio-control-wc-shipping-method"]', function() {
        console.log('üìª –ò–∑–º–µ–Ω–µ–Ω –º–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏ (–±–ª–æ—á–Ω—ã–π —á–µ–∫–∞—É—Ç)');
        debouncedUpdate();
    });
    
    // –°–ª—É—à–∞–µ–º –∫–ª–∏–∫–∏ –ø–æ –≤–∫–ª–∞–¥–∫–∞–º –¥–æ—Å—Ç–∞–≤–∫–∏
    $(document).on('click', '.wc-block-checkout__shipping-method-option', function() {
        console.log('üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –≤–∫–ª–∞–¥–∫–µ –¥–æ—Å—Ç–∞–≤–∫–∏');
        debouncedUpdate();
    });
    
    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º —á–µ–∫–∞—É—Ç–µ
    $(document).on('change', 'input[name^="shipping_method"]', function() {
        console.log('üìª –ò–∑–º–µ–Ω–µ–Ω –º–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏ (–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —á–µ–∫–∞—É—Ç)');
        debouncedUpdate();
    });
    
    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ–∫–∞—É—Ç–∞
    $(document).on('updated_checkout checkout_updated', function() {
        console.log('üîÑ –°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ–∫–∞—É—Ç–∞');
        debouncedUpdate();
    });
    
    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–ª–æ–∫–µ –¥–æ—Å—Ç–∞–≤–∫–∏
    function observeShippingBlock() {
        const shippingBlock = document.querySelector('.wp-block-woocommerce-checkout-order-summary-shipping-block');
        
        if (shippingBlock) {
            const observer = new MutationObserver(function(mutations) {
                let shouldUpdate = false;
                
                mutations.forEach(function(mutation) {
                    if (mutation.type === 'childList' || 
                        mutation.type === 'characterData' || 
                        (mutation.type === 'attributes' && mutation.attributeName === 'class')) {
                        shouldUpdate = true;
                    }
                });
                
                if (shouldUpdate) {
                    console.log('üëÅÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–ª–æ–∫–µ –¥–æ—Å—Ç–∞–≤–∫–∏');
                    debouncedUpdate();
                }
            });
            
            observer.observe(shippingBlock, {
                childList: true,
                subtree: true,
                characterData: true,
                attributes: true,
                attributeFilter: ['class']
            });
            
            console.log('üëÅÔ∏è –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –±–ª–æ–∫–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
        } else {
            // –ï—Å–ª–∏ –±–ª–æ–∫ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ
            setTimeout(observeShippingBlock, 1000);
        }
    }
    
    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ localStorage (–¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Å–∫—Ä–∏–ø—Ç–∞–º–∏)
    window.addEventListener('storage', function(e) {
        if (e.key === 'selectedCdekPoint') {
            console.log('üíæ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ localStorage, –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è');
            debouncedUpdate();
        }
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    setTimeout(function() {
        ensureHiddenFields(); // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—è —Å—Ä–∞–∑—É –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        updateTextareaFields();
        observeShippingBlock();
        console.log('‚úÖ –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ textarea –ø–æ–ª–µ–π –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ');
    }, 1000);
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –º–æ–∂–µ—Ç –º–µ—à–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö
    // setInterval(function() {
    //     if ($('.wp-block-woocommerce-checkout').length) {
    //         updateTextareaFields();
    //     }
    // }, 10000);
    
    // –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    window.updateTextareaFields = updateTextareaFields;
    window.fillTextareaFields = fillTextareaFields;
    window.getCurrentDeliveryType = getCurrentDeliveryType;
    
    console.log('üéØ –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ textarea –ø–æ–ª–µ–π –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
});