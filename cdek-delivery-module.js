/**
 * –°–î–≠–ö –î–æ—Å—Ç–∞–≤–∫–∞ - ES6 –ú–û–î–£–õ–¨ –¥–ª—è WordPress 6.5+
 * üöÄ –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –° –ú–û–î–£–õ–Ø–ú–ò
 */

// ES6 –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
const { performance, IntersectionObserver, AbortController, fetch } = window;

// –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –¥–ª—è WordPress Script Modules API
export class CdekDeliveryModule {
    constructor(config = {}) {
        this.config = { ...window.cdekConfig, ...config };
        this.performance = {
            startTime: performance.now(),
            marks: new Map()
        };
        
        this.init();
    }
    
    async init() {
        console.log('üöÄ –°–î–≠–ö ES6 Module v4.0 - –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –ú–û–©–ù–û–°–¢–¨!');
        
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if (this.needsMaps()) {
            await this.loadMapsModule();
        }
        
        this.initDeliveryLogic();
        
        console.log('‚úÖ ES6 –º–æ–¥—É–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∑–∞:', 
                   (performance.now() - this.performance.startTime).toFixed(2) + 'ms');
    }
    
    needsMaps() {
        return document.querySelector('.cdek-map-container') !== null;
    }
    
    async loadMapsModule() {
        try {
            // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            const mapsModule = await import('@cdek/maps-api');
            this.maps = mapsModule;
            console.log('üó∫Ô∏è –Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏');
        } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç—ã:', error);
        }
    }
    
    initDeliveryLogic() {
        // –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –±–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        
        // Performance Observer –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if (typeof PerformanceObserver !== 'undefined') {
            const observer = new PerformanceObserver((list) => {
                list.getEntries().forEach((entry) => {
                    if (entry.name.includes('cdek')) {
                        console.log(`üìä ${entry.name}: ${entry.duration.toFixed(2)}ms`);
                    }
                });
            });
            observer.observe({ entryTypes: ['measure'] });
        }
        
        // Intersection Observer –¥–ª—è lazy loading
        if (IntersectionObserver) {
            this.setupLazyLoading();
        }
        
        // Service Worker –¥–ª—è –æ—Ñ–ª–∞–π–Ω –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        if ('serviceWorker' in navigator) {
            this.registerServiceWorker();
        }
    }
    
    setupLazyLoading() {
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('cdek-loaded');
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –æ–Ω –≤–∏–¥–µ–Ω
                    this.loadDeliveryPoints(entry.target);
                }
            });
        });
        
        document.querySelectorAll('.cdek-delivery-point').forEach(el => {
            observer.observe(el);
        });
    }
    
    async registerServiceWorker() {
        try {
            const registration = await navigator.serviceWorker.register('/cdek-sw.js');
            console.log('üîß Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', registration);
        } catch (error) {
            console.log('‚ÑπÔ∏è Service Worker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
        }
    }
    
    async loadDeliveryPoints(element) {
        // –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π fetch –≤–º–µ—Å—Ç–æ jQuery.ajax
        try {
            const formData = new FormData();
            formData.append('action', 'get_cdek_points');
            formData.append('nonce', this.config.nonce);
            
            const response = await fetch(this.config.ajaxUrl, {
                method: 'POST',
                body: formData,
                signal: AbortSignal.timeout(30000) // –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π timeout
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            
            const data = await response.json();
            this.renderPoints(data, element);
            
        } catch (error) {
            console.error('üö® –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ü–í–ó:', error);
            this.showError(element, '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—É–Ω–∫—Ç—ã –≤—ã–¥–∞—á–∏');
        }
    }
    
    renderPoints(data, container) {
        // –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å Web Components
        const template = document.createElement('template');
        template.innerHTML = `
            <div class="cdek-points-ultra">
                ${data.map(point => `
                    <div class="cdek-point" data-code="${point.code}">
                        <h4>${point.name}</h4>
                        <p>${point.address}</p>
                        <span class="cdek-cost">${point.delivery_sum} ‚ÇΩ</span>
                    </div>
                `).join('')}
            </div>
        `;
        
        container.appendChild(template.content.cloneNode(true));
    }
    
    showError(container, message) {
        container.innerHTML = `
            <div class="cdek-error">
                <span class="cdek-error-icon">‚ö†Ô∏è</span>
                <span class="cdek-error-text">${message}</span>
            </div>
        `;
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞
if (typeof window.cdekConfig !== 'undefined') {
    const cdekModule = new CdekDeliveryModule();
    // –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    window.cdekDelivery = cdekModule;
}

export default CdekDeliveryModule;