/**
 * –°–î–≠–ö –î–æ—Å—Ç–∞–≤–∫–∞ - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã: —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∫–æ—Ä–æ–±–æ–∫, CORS –æ—à–∏–±–∫–∏, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
 */

// ========== –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò ==========

// –£–±—Ä–∞–Ω–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã

// –£–º–Ω—ã–π –¥–µ–±–∞—É–Ω—Å–µ—Ä —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
class SmartDebouncer {
    constructor() {
        this.timers = new Map();
        this.priorities = new Map();
    }
    
    debounce(key, fn, delay, priority = 0) {
        if (priority > 5) {
            this.cancel(key);
            return fn();
        }
        
        this.cancel(key);
        
        const timer = setTimeout(() => {
            fn();
            this.timers.delete(key);
            this.priorities.delete(key);
        }, delay);
        
        this.timers.set(key, timer);
        this.priorities.set(key, priority);
    }
    
    cancel(key) {
        if (this.timers.has(key)) {
            clearTimeout(this.timers.get(key));
            this.timers.delete(key);
            this.priorities.delete(key);
        }
    }
}

// –ë–∞—Ç—á–∏–Ω–≥ DOM –æ–ø–µ—Ä–∞—Ü–∏–π —Å throttling –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
class DOMBatcher {
    constructor() {
        this.operations = [];
        this.scheduled = false;
        this.isMobile = window.innerWidth <= 768;
        this.throttleDelay = this.isMobile ? 32 : 16; // 30fps –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö, 60fps –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
    }
    
    add(operation) {
        this.operations.push(operation);
        if (!this.scheduled) {
            this.scheduled = true;
            
            if (this.isMobile) {
                // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º setTimeout –≤–º–µ—Å—Ç–æ rAF –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                setTimeout(() => this.flush(), this.throttleDelay);
            } else {
                requestAnimationFrame(() => this.flush());
            }
        }
    }
    
    flush() {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ—Ä—Ü–∏—è–º–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
        const batchSize = this.isMobile ? 5 : 10;
        const currentBatch = this.operations.splice(0, batchSize);
        
        currentBatch.forEach(op => {
            try {
                op();
            } catch (error) {
                console.error('DOM operation error:', error);
            }
        });
        
        if (this.operations.length > 0) {
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –æ–ø–µ—Ä–∞—Ü–∏–π
            setTimeout(() => this.flush(), this.throttleDelay);
        } else {
            this.scheduled = false;
        }
    }
}

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω - –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û!
class PriceFormatter {
    static fixDuplicatedPrice(priceText) {
        if (!priceText || typeof priceText !== 'string') {
            return priceText;
        }
        
        const numbers = priceText.match(/\d+/g);
        if (!numbers || numbers.length === 0) {
            return priceText;
        }
        
        const mainNumber = numbers[0];
        
        // –ù–ï –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –∏—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã (135000 + 6984 = 141984)
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω–æ–π —Å—É–º–º–æ–π –∑–∞–∫–∞–∑–∞
        const numValue = parseInt(mainNumber);
        if (numValue >= 100000 && numValue <= 999999) {
            // –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω–∞—è –∏—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞, –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
            return priceText;
        }
        
        if (mainNumber.length >= 6) {
            const patterns = [
                // –ü–∞—Ç—Ç–µ—Ä–Ω –ø–æ–ª–Ω–æ–≥–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è: ABCABC -> ABC (–Ω–∞–ø—Ä–∏–º–µ—Ä: 180180 -> 180)
                { 
                    prefixLen: Math.floor(mainNumber.length / 2), 
                    check: (prefix, suffix) => prefix === suffix && prefix.length >= 2
                },
                // –ü–∞—Ç—Ç–µ—Ä–Ω —Å–∫–ª–µ–∏–≤–∞–Ω–∏—è: ABC + DEFGH = ABCDEFGH, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ ABC –Ω–∞–º–Ω–æ–≥–æ –º–µ–Ω—å—à–µ DEFGH
                { 
                    prefixLen: 3, 
                    check: (prefix, suffix) => {
                        const prefixNum = parseInt(prefix);
                        const suffixNum = parseInt(suffix);
                        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–µ—Ñ–∏–∫—Å –≤ 10+ —Ä–∞–∑ –º–µ–Ω—å—à–µ —Å—É—Ñ—Ñ–∏–∫—Å–∞
                        return prefixNum > 0 && suffixNum > 0 && (suffixNum / prefixNum) >= 10;
                    }
                }
            ];
            
            for (const pattern of patterns) {
                if (mainNumber.length >= pattern.prefixLen * 2) {
                    const prefix = mainNumber.substring(0, pattern.prefixLen);
                    const suffix = mainNumber.substring(pattern.prefixLen);
                    
                    if (pattern.check(prefix, suffix)) {
                        const correctedNumber = pattern.prefixLen === Math.floor(mainNumber.length / 2) ? prefix : suffix;
                        const correctedText = priceText.replace(mainNumber, correctedNumber);
                        
                        console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: ${priceText} -> ${correctedText}`);
                        return correctedText;
                    }
                }
            }
        }
        
        return priceText;
    }
    
    static extractCleanPrice(priceText) {
        const fixed = this.fixDuplicatedPrice(priceText);
        const match = fixed.match(/(\d+(?:\.\d+)?)/);
        return match ? parseFloat(match[1]) : 0;
    }
}

// ========== –£–ú–ù–´–ô –ü–û–ò–°–ö –ê–î–†–ï–°–û–í –° –ü–û–õ–ù–´–ú –°–ü–ò–°–ö–û–ú –ì–û–†–û–î–û–í ==========

class SmartAddressSearch {
    constructor() {
        this.debouncer = new SmartDebouncer();
        this.userLocation = null;
        
        // –ü–û–õ–ù–´–ô —Å–ø–∏—Å–æ–∫ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π)
        this.popularCities = [
            // –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –∏ –º–∏–ª–ª–∏–æ–Ω–Ω–∏–∫–∏
            '–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–ö–∞–∑–∞–Ω—å', '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥',
            '–ß–µ–ª—è–±–∏–Ω—Å–∫', '–°–∞–º–∞—Ä–∞', '–£—Ñ–∞', '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É', '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä', '–ü–µ—Ä–º—å', '–í–æ—Ä–æ–Ω–µ–∂',
            '–í–æ–ª–≥–æ–≥—Ä–∞–¥', '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', '–°–∞—Ä–∞—Ç–æ–≤', '–¢—é–º–µ–Ω—å', '–¢–æ–ª—å—è—Ç—Ç–∏', '–ò–∂–µ–≤—Å–∫', '–ë–∞—Ä–Ω–∞—É–ª',
            
            // –ö—Ä—É–ø–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã
            '–£–ª—å—è–Ω–æ–≤—Å–∫', '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫', '–Ø—Ä–æ—Å–ª–∞–≤–ª—å', '–ò—Ä–∫—É—Ç—Å–∫', '–•–∞–±–∞—Ä–æ–≤—Å–∫', '–ú–∞—Ö–∞—á–∫–∞–ª–∞', '–¢–æ–º—Å–∫',
            '–û—Ä–µ–Ω–±—É—Ä–≥', '–ö–µ–º–µ—Ä–æ–≤–æ', '–ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫', '–†—è–∑–∞–Ω—å', '–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å', '–ü–µ–Ω–∑–∞', '–õ–∏–ø–µ—Ü–∫',
            '–¢—É–ª–∞', '–ö–∏—Ä–æ–≤', '–ß–µ–±–æ–∫—Å–∞—Ä—ã', '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥', '–ë—Ä—è–Ω—Å–∫', '–ö—É—Ä—Å–∫', '–ò–≤–∞–Ω–æ–≤–æ', '–ú–∞–≥–Ω–∏—Ç–æ–≥–æ—Ä—Å–∫',
            '–¢–≤–µ—Ä—å', '–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å', '–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å', '–ë–µ–ª–≥–æ—Ä–æ–¥', '–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫', '–í–ª–∞–¥–∏–º–∏—Ä', '–°–æ—á–∏',
            '–ö—É—Ä–≥–∞–Ω', '–°–º–æ–ª–µ–Ω—Å–∫', '–ö–∞–ª—É–≥–∞', '–ß–∏—Ç–∞', '–û—Ä—ë–ª', '–í–æ–ª–∂—Å–∫–∏–π', '–ß–µ—Ä–µ–ø–æ–≤–µ—Ü', '–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑',
            '–ú—É—Ä–º–∞–Ω—Å–∫', '–°—É—Ä–≥—É—Ç', '–í–æ–ª–æ–≥–¥–∞', '–¢–∞–º–±–æ–≤', '–°—Ç–µ—Ä–ª–∏—Ç–∞–º–∞–∫', '–ì—Ä–æ–∑–Ω—ã–π', '–Ø–∫—É—Ç—Å–∫',
            '–ö–æ—Å—Ç—Ä–æ–º–∞', '–ö–æ–º—Å–æ–º–æ–ª—å—Å–∫-–Ω–∞-–ê–º—É—Ä–µ', '–ü–µ—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫', '–¢–∞–≥–∞–Ω—Ä–æ–≥', '–ù–∏–∂–Ω–µ–≤–∞—Ä—Ç–æ–≤—Å–∫', '–ô–æ—à–∫–∞—Ä-–û–ª–∞',
            
            // –ì–æ—Ä–æ–¥–∞ —Å –Ω–∞—Å–µ–ª–µ–Ω–∏–µ–º –±–æ–ª–µ–µ 200 —Ç—ã—Å—è—á
            '–ë—Ä–∞—Ç—Å–∫', '–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫', '–î–∑–µ—Ä–∂–∏–Ω—Å–∫', '–®–∞—Ö—Ç—ã', '–ù–∏–∂–Ω–µ–∫–∞–º—Å–∫', '–û—Ä—Å–∫', '–ê–Ω–≥–∞—Ä—Å–∫',
            '–°—Ç–∞—Ä—ã–π –û—Å–∫–æ–ª', '–í–µ–ª–∏–∫–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', '–ë–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫', '–ü—Ä–æ–∫–æ–ø—å–µ–≤—Å–∫', '–•–∏–º–∫–∏', '–ë–∏–π—Å–∫',
            '–≠–Ω–≥–µ–ª—å—Å', '–†—ã–±–∏–Ω—Å–∫', '–ë–∞–ª–∞—à–∏—Ö–∞', '–°–µ–≤–µ—Ä–æ–¥–≤–∏–Ω—Å–∫', '–ê—Ä–º–∞–≤–∏—Ä', '–ü–æ–¥–æ–ª—å—Å–∫', '–ö–æ—Ä–æ–ª—ë–≤',
            '–°—ã–∑—Ä–∞–Ω—å', '–ù–æ—Ä–∏–ª—å—Å–∫', '–ó–æ–ª–æ—Ç–æ–µ –∫–æ–ª—å—Ü–æ', '–ö–∞–º–µ–Ω—Å–∫-–£—Ä–∞–ª—å—Å–∫–∏–π', '–í–æ–ª–∂—Å–∫', '–ê–ª—å–º–µ—Ç—å–µ–≤—Å–∫',
            '–£—Å—Å—É—Ä–∏–π—Å–∫', '–ú—ã—Ç–∏—â–∏', '–õ—é–±–µ—Ä—Ü—ã', '–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å', '–°–∞–ª–∞–≤–∞—Ç', '–ú–∏–∞—Å—Å', '–ê–±–∞–∫–∞–Ω',
            '–†—É–±—Ü–æ–≤—Å–∫', '–ö–æ–ª–æ–º–Ω–∞', '–ú–∞–π–∫–æ–ø', '–ö–æ–≤—Ä–æ–≤', '–ö—Ä–∞—Å–Ω–æ–≥–æ—Ä—Å–∫', '–ù–∞–ª—å—á–∏–∫', '–£—Å—Ç—å-–ò–ª–∏–º—Å–∫',
            '–°–µ—Ä–ø—É—Ö–æ–≤', '–ù–æ–≤–æ—á–µ–±–æ–∫—Å–∞—Ä—Å–∫', '–ù–µ—Ñ—Ç–µ—é–≥–∞–Ω—Å–∫', '–î–∏–º–∏—Ç—Ä–æ–≤–≥—Ä–∞–¥', '–ù–µ—Ñ—Ç–µ–∫–∞–º—Å–∫', '–ß–µ—Ä–∫–µ—Å—Å–∫',
            '–î–µ—Ä–±–µ–Ω—Ç', '–ö–∞–º—ã—à–∏–Ω', '–ù–æ–≤—ã–π –£—Ä–µ–Ω–≥–æ–π', '–ú—É—Ä–æ–º', '–ê—á–∏–Ω—Å–∫', '–ö–∏—Å–ª–æ–≤–æ–¥—Å–∫', '–ü–µ—Ä–≤–æ—É—Ä–∞–ª—å—Å–∫',
            '–ï–ª–µ—Ü', '–ï–≤–ø–∞—Ç–æ—Ä–∏—è', '–ê—Ä–∑–∞–º–∞—Å', '–†—É–±—Ü–æ–≤—Å–∫', '–¢–æ–±–æ–ª—å—Å–∫', '–ñ—É–∫–æ–≤—Å–∫–∏–π', '–ù–æ—è–±—Ä—å—Å–∫',
            '–ù–µ–≤–∏–Ω–Ω–æ–º—ã—Å—Å–∫', '–ë–µ—Ä–µ–∑–Ω–∏–∫–∏', '–ù–∞–∑—Ä–∞–Ω—å', '–Æ–∂–Ω–æ-–°–∞—Ö–∞–ª–∏–Ω—Å–∫', '–í–æ–ª–≥–æ–¥–æ–Ω—Å–∫', '–°—ã–∫—Ç—ã–≤–∫–∞—Ä',
            '–ù–æ–≤–æ—á–µ—Ä–∫–∞—Å—Å–∫', '–ö–∞—Å–ø–∏–π—Å–∫', '–û–±–Ω–∏–Ω—Å–∫', '–ü—è—Ç–∏–≥–æ—Ä—Å–∫', '–û–∫—Ç—è–±—Ä—å—Å–∫–∏–π', '–õ–æ–º–æ–Ω–æ—Å–æ–≤'
        ];
        
        this.initUserLocation();
    }
    
    async initUserLocation() {
        try {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    (position) => {
                        this.userLocation = {
                            lat: position.coords.latitude,
                            lng: position.coords.longitude
                        };
                        console.log('‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞:', this.userLocation);
                    },
                    (error) => {
                        console.log('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
                        // –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω–µ—à–Ω–∏–µ API - –∏–∑–±–µ–≥–∞–µ–º CORS –æ—à–∏–±–æ–∫
                        this.setDefaultLocation();
                    },
                    { timeout: 5000, maximumAge: 300000 }
                );
            } else {
                this.setDefaultLocation();
            }
        } catch (error) {
            console.log('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
            this.setDefaultLocation();
        }
    }
    
    setDefaultLocation() {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ú–æ—Å–∫–≤—É –∫–∞–∫ –ª–æ–∫–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.userLocation = {
            lat: 55.7558,
            lng: 37.6176,
            city: '–ú–æ—Å–∫–≤–∞'
        };
    }
    
    search(query, callback) {
        this.debouncer.debounce('address-search', () => {
            this.performSearch(query, callback);
        }, 100); // –£—Å–∫–æ—Ä–µ–Ω–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞
    }
    
    performSearch(query, callback) {
        if (!query || query.length < 2) {
            callback([]);
            return;
        }
        
        const results = this.searchInCities(query);
        callback(results);
    }
    
    searchInCities(query) {
        const queryLower = query.toLowerCase().trim();
        const results = [];
        
        // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
        const maxResults = window.innerWidth <= 768 ? 8 : 12;
        
        this.popularCities.forEach(city => {
            if (results.length >= maxResults) return;
            
            const cityLower = city.toLowerCase();
            let score = 0;
            
            if (cityLower === queryLower) {
                score = 1000;
            } else if (cityLower.startsWith(queryLower)) {
                score = 500;
            } else if (cityLower.includes(queryLower)) {
                score = 200;
            } else {
                // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ö–æ–∂–µ—Å—Ç–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
                if (queryLower.length >= 3) {
                    const similarity = this.fastSimilarity(queryLower, cityLower);
                    if (similarity > 0.6) {
                        score = similarity * 100;
                    }
                }
            }
            
            if (score > 0) {
                const popularityIndex = this.popularCities.indexOf(city);
                const popularityBonus = (this.popularCities.length - popularityIndex) * 2;
                score += popularityBonus;
                
                if (this.userLocation && this.userLocation.city === city) {
                    score += 200;
                }
                
                results.push({
                    city: city,
                    display: city,
                    score: score,
                    type: 'city'
                });
            }
        });
        
        results.sort((a, b) => b.score - a.score);
        return results.slice(0, maxResults);
    }
    
    // –ë—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ—Ö–æ–∂–µ—Å—Ç–∏ –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞
    fastSimilarity(str1, str2) {
        if (str1.length === 0) return str2.length === 0 ? 1 : 0;
        if (str2.length === 0) return 0;
        
        let matches = 0;
        const minLen = Math.min(str1.length, str2.length);
        
        for (let i = 0; i < minLen; i++) {
            if (str1[i] === str2[i]) {
                matches++;
            }
        }
        
        return matches / Math.max(str1.length, str2.length);
    }
}

// ========== –û–°–ù–û–í–ù–û–ô –ö–û–î –°–î–≠–ö ==========

jQuery(document).ready(function($) {
    var cdekMap = null;
    var cdekPoints = [];
    var selectedPoint = null;
    var isInitialized = false;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    const debouncer = new SmartDebouncer();
    const domBatcher = new DOMBatcher();
    const addressSearch = new SmartAddressSearch();
    
    // ========== –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–£–ë–õ–ò–†–û–í–ê–ù–ù–´–• –¶–ï–ù ==========
    
    function interceptPriceUpdates() {
        if (typeof $ !== 'undefined' && $.fn.text) {
            var originalText = $.fn.text;
            $.fn.text = function(value) {
                if (arguments.length > 0 && typeof value === 'string') {
                    if (this.hasClass('wc-block-components-totals-item__value') || 
                        this.hasClass('wc-block-formatted-money-amount')) {
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º–æ–π
                        var isTotal = this.closest('.wc-block-components-totals-footer-item').length > 0 ||
                                     this.siblings('.wc-block-components-totals-item__label').text().indexOf('–ò—Ç–æ–≥–æ') !== -1;
                        
                        if (!isTotal) {
                            value = PriceFormatter.fixDuplicatedPrice(value);
                        }
                    }
                }
                return originalText.apply(this, arguments.length > 0 ? [value] : []);
            };
        }
        
        if (typeof HTMLElement !== 'undefined') {
            const originalTextContentDescriptor = Object.getOwnPropertyDescriptor(HTMLElement.prototype, 'textContent') || 
                                                 Object.getOwnPropertyDescriptor(Element.prototype, 'textContent');
            
            if (originalTextContentDescriptor && originalTextContentDescriptor.set) {
                Object.defineProperty(HTMLElement.prototype, 'textContent', {
                    set: function(value) {
                        if (typeof value === 'string' && 
                            (this.classList.contains('wc-block-components-totals-item__value') ||
                             this.classList.contains('wc-block-formatted-money-amount'))) {
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º–æ–π
                            var isTotal = this.closest('.wc-block-components-totals-footer-item') ||
                                         (this.parentElement && this.parentElement.querySelector('.wc-block-components-totals-item__label') &&
                                          this.parentElement.querySelector('.wc-block-components-totals-item__label').textContent.indexOf('–ò—Ç–æ–≥–æ') !== -1);
                            
                            if (!isTotal) {
                                value = PriceFormatter.fixDuplicatedPrice(value);
                            }
                        }
                        originalTextContentDescriptor.set.call(this, value);
                    },
                    get: originalTextContentDescriptor.get
                });
            }
        }
    }
    
    function fixExistingDuplicatedPrices() {
        domBatcher.add(() => {
            $('.wc-block-components-totals-item__value, .wc-block-formatted-money-amount').each(function() {
                const $element = $(this);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º–æ–π
                const isTotal = $element.closest('.wc-block-components-totals-footer-item').length > 0 ||
                               $element.siblings('.wc-block-components-totals-item__label').text().indexOf('–ò—Ç–æ–≥–æ') !== -1;
                
                if (!isTotal) {
                    const currentText = $element.text().trim();
                    const fixedText = PriceFormatter.fixDuplicatedPrice(currentText);
                    
                    if (currentText !== fixedText) {
                        console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ü–µ–Ω—É: ${currentText} -> ${fixedText}`);
                        $element.text(fixedText);
                    }
                }
            });
        });
    }
    
    function startPriceMonitoring() {
        // –£—Å–∫–æ—Ä—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–Ω
        const interval = window.innerWidth <= 768 ? 1000 : 500;
        
        setInterval(() => {
            fixExistingDuplicatedPrices();
        }, interval);
        
        if (typeof MutationObserver !== 'undefined') {
            const observer = new MutationObserver((mutations) => {
                let shouldCheck = false;
                
                mutations.forEach((mutation) => {
                    if (mutation.type === 'childList' || mutation.type === 'characterData') {
                        const target = mutation.target;
                        if (target.classList && 
                            (target.classList.contains('wc-block-components-totals-item__value') ||
                             target.classList.contains('wc-block-formatted-money-amount'))) {
                            shouldCheck = true;
                        }
                    }
                });
                
                if (shouldCheck) {
                    debouncer.debounce('price-fix', () => {
                        fixExistingDuplicatedPrices();
                    }, 50, 7);
                }
            });
            
            observer.observe(document.body, {
                childList: true,
                subtree: true,
                characterData: true
            });
        }
    }
    
    // ========== –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –†–ê–°–ß–ï–¢–ê –ì–ê–ë–ê–†–ò–¢–û–í ==========
    
    function getCartDataForCalculation() {
        var cartWeight = 0;
        var cartValue = 0;
        var totalVolume = 0;
        var maxLength = 0, maxWidth = 0, maxHeight = 0;
        var hasValidDimensions = false;
        var totalItems = 0;
        var packagesCount = 1;
        
        console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞...');
        
        var processedItems = new Set();
        $('.wc-block-components-order-summary-item').each(function() {
            var $item = $(this);
            
            var itemName = $item.find('.wc-block-components-product-name').text().trim();
            var itemId = itemName + '_' + $item.index();
            
            if (processedItems.has(itemId)) {
                return;
            }
            processedItems.add(itemId);
            
            var quantityElement = $item.find('.wc-block-components-order-summary-item__quantity span[aria-hidden="true"]');
            var quantity = parseInt(quantityElement.text()) || 1;
            
            console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ WC –±–ª–æ–∫–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', quantity);
            
            var dimensionsElement = $item.find('.wc-block-components-product-details__value').filter(function() {
                var siblingLabel = $(this).siblings('.wc-block-components-product-details__name');
                var labelText = siblingLabel.text();
                return labelText.indexOf('–ì–∞–±–∞—Ä–∏—Ç—ã') !== -1 || labelText.indexOf('–†–∞–∑–º–µ—Ä—ã') !== -1;
            });
            
            if (dimensionsElement.length > 0) {
                var dimensionsText = dimensionsElement.text().trim();
                console.log('–ù–∞–π–¥–µ–Ω—ã –≥–∞–±–∞—Ä–∏—Ç—ã –≤ –±–ª–æ–∫–µ —Ç–æ–≤–∞—Ä–∞:', dimensionsText);
                
                var dimensionsMatch = dimensionsText.match(/(\d+(?:\.\d+)?)\s*[√óx]\s*(\d+(?:\.\d+)?)\s*[√óx]\s*(\d+(?:\.\d+)?)/);
                
                if (dimensionsMatch) {
                    var length = parseFloat(dimensionsMatch[1]);
                    var width = parseFloat(dimensionsMatch[2]);
                    var height = parseFloat(dimensionsMatch[3]);
                    
                    console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã –≥–∞–±–∞—Ä–∏—Ç—ã –∏–∑ WC –±–ª–æ–∫–∞ —Ç–æ–≤–∞—Ä–∞:', {length: length, width: width, height: height, quantity: quantity});
                    
                    var itemVolume = length * width * height * quantity;
                    totalVolume += itemVolume;
                    totalItems += quantity;
                    
                    maxLength = Math.max(maxLength, length);
                    maxWidth = Math.max(maxWidth, width);
                    maxHeight = Math.max(maxHeight, height);
                    
                    hasValidDimensions = true;
                }
            }
            
            var weightElement = $item.find('.wc-block-components-product-details__value').filter(function() {
                var siblingLabel = $(this).siblings('.wc-block-components-product-details__name');
                return siblingLabel.text().indexOf('–í–µ—Å') !== -1;
            });
            
            if (weightElement.length > 0) {
                var weightText = weightElement.text().trim();
                console.log('–ù–∞–π–¥–µ–Ω –≤–µ—Å –≤ –±–ª–æ–∫–µ —Ç–æ–≤–∞—Ä–∞:', weightText);
                
                var weightMatch = weightText.match(/(\d+(?:\.\d+)?)/);
                
                if (weightMatch) {
                    var weight = parseFloat(weightMatch[1]);
                    
                    if (weightText.includes('–∫–≥')) {
                        weight = weight * 1000;
                    }
                    
                    cartWeight += weight * quantity;
                    console.log('‚úÖ –ù–∞–π–¥–µ–Ω –≤–µ—Å –∏–∑ WC –±–ª–æ–∫–∞ —Ç–æ–≤–∞—Ä–∞:', weight, '–≥, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', quantity);
                }
            }
            
            var totalPriceElement = $item.find('.wc-block-components-order-summary-item__total-price .wc-block-components-product-price__value');
            
            if (totalPriceElement.length > 0) {
                var totalPriceText = totalPriceElement.text().trim();
                console.log('–ù–∞–π–¥–µ–Ω–∞ –∏—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞:', totalPriceText);
                
                var totalPrice = PriceFormatter.extractCleanPrice(totalPriceText);
                cartValue += totalPrice;
                console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:', totalPrice, '—Ä—É–±. (—Å —É—á–µ—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞', quantity + ')');
            }
        });
        
        var totalOrderElement = $('.wc-block-components-totals-footer-item .wc-block-components-totals-item__value');
        var orderTotalFromFooter = 0;
        
        if (totalOrderElement.length > 0) {
            var totalText = totalOrderElement.first().text().trim();
            console.log('–ù–∞–π–¥–µ–Ω–∞ –∏—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞:', totalText);
            
            orderTotalFromFooter = PriceFormatter.extractCleanPrice(totalText);
            console.log('–ò–∑–≤–ª–µ—á–µ–Ω–∞ –∏—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞:', orderTotalFromFooter);
        }
        
        // ========== –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –†–ê–°–ß–ï–¢ –†–ê–ó–ú–ï–†–û–í –£–ü–ê–ö–û–í–ö–ò ==========
        var dimensions;
        if (hasValidDimensions && totalVolume > 0) {
            console.log('–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ —É–ø–∞–∫–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ–≤–∞—Ä–æ–≤:', {
                totalVolume: totalVolume,
                maxLength: maxLength,
                maxWidth: maxWidth,
                maxHeight: maxHeight,
                totalItems: totalItems
            });
            
            if (totalItems <= 2) {
                dimensions = {
                    length: Math.ceil(maxLength * 1.05),
                    width: Math.ceil(maxWidth * 1.05),
                    height: Math.ceil(maxHeight * 1.05)
                };
            } else {
                var volumeRatio = Math.pow(totalVolume / (maxLength * maxWidth * maxHeight), 1/3);
                
                dimensions = {
                    length: Math.ceil(maxLength * Math.max(volumeRatio, 1) * 1.1),
                    width: Math.ceil(maxWidth * Math.max(volumeRatio, 1) * 1.1),
                    height: Math.ceil(maxHeight * Math.max(volumeRatio, 1) * 1.1)
                };
            }
            
            dimensions.length = Math.max(10, Math.min(dimensions.length, 150));
            dimensions.width = Math.max(10, Math.min(dimensions.width, 150));
            dimensions.height = Math.max(5, Math.min(dimensions.height, 150));
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –û–ë–™–ï–ú–ê –£–ü–ê–ö–û–í–ö–ò
            var volume = (dimensions.height + dimensions.width) * 2 + dimensions.length;
            if (volume > 300) {
                console.log('‚ö†Ô∏è –û–±—ä–µ–º —É–ø–∞–∫–æ–≤–∫–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –°–î–≠–ö:', volume, '—Å–º > 300 —Å–º. –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä–æ–±–æ–∫.');
                
                // –ü–†–ê–í–ò–õ–¨–ù–´–ô —Ä–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ—Ä–æ–±–æ–∫
                packagesCount = Math.ceil(volume / 280); // 280 –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–ø–∞—Å–∞
                
                // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –æ–¥–Ω–æ–π –∫–æ—Ä–æ–±–∫–∏
                var targetVolume = 280; // –¶–µ–ª–µ–≤–æ–π –æ–±—ä–µ–º –æ–¥–Ω–æ–π –∫–æ—Ä–æ–±–∫–∏
                var scaleFactor = Math.pow(targetVolume / volume, 1/3);
                
                dimensions = {
                    length: Math.max(10, Math.min(Math.ceil(dimensions.length * scaleFactor), 100)),
                    width: Math.max(10, Math.min(Math.ceil(dimensions.width * scaleFactor), 100)),
                    height: Math.max(5, Math.min(Math.ceil(dimensions.height * scaleFactor), 100))
                };
                
                // –ü–†–û–í–ï–†–Ø–ï–ú —á—Ç–æ –Ω–æ–≤—ã–π –æ–±—ä–µ–º –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
                var newVolume = (dimensions.height + dimensions.width) * 2 + dimensions.length;
                
                // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º
                if (newVolume > 300) {
                    var additionalScale = 280 / newVolume;
                    dimensions.length = Math.max(10, Math.ceil(dimensions.length * additionalScale));
                    dimensions.width = Math.max(10, Math.ceil(dimensions.width * additionalScale));
                    dimensions.height = Math.max(5, Math.ceil(dimensions.height * additionalScale));
                    newVolume = (dimensions.height + dimensions.width) * 2 + dimensions.length;
                }
                
                var itemsPerPackage = Math.ceil(totalItems / packagesCount);
                
                console.log('‚úÖ –ì—Ä—É–∑ —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞', packagesCount, '–∫–æ—Ä–æ–±–æ–∫. –†–∞–∑–º–µ—Ä –æ–¥–Ω–æ–π –∫–æ—Ä–æ–±–∫–∏:', dimensions);
                console.log('‚úÖ –û–±—ä–µ–º –æ–¥–Ω–æ–π –∫–æ—Ä–æ–±–∫–∏:', newVolume, '—Å–º (–ª–∏–º–∏—Ç: 300 —Å–º). –¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–æ–±–∫–µ:', itemsPerPackage);
                
                // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤–µ—Å –Ω–∞ –æ–¥–Ω—É –∫–æ—Ä–æ–±–∫—É
                cartWeight = cartWeight / packagesCount;
            } else {
                console.log('‚úÖ –û–±—ä–µ–º —É–ø–∞–∫–æ–≤–∫–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞:', volume, '—Å–º <= 300 —Å–º');
            }
            
            console.log('–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —É–ø–∞–∫–æ–≤–∫–∏:', dimensions);
        } else {
            console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–Ω–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –≥–∞–±–∞—Ä–∏—Ç–æ–≤)');
            dimensions = {
                length: 30,
                width: 20,
                height: 15
            };
        }
        
        if (cartWeight === 0) {
            cartWeight = 500;
        }
        
        if (orderTotalFromFooter > 0) {
            console.log('üí∞ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞:', orderTotalFromFooter, '—Ä—É–±. (–≤–º–µ—Å—Ç–æ —Å—É–º–º—ã –ø–æ —Ç–æ–≤–∞—Ä–∞–º:', cartValue, '—Ä—É–±.)');
            cartValue = orderTotalFromFooter;
        } else if (cartValue === 0) {
            var subtotalElement = $('.wc-block-components-totals-item').filter(function() {
                var labelText = $(this).find('.wc-block-components-totals-item__label').text();
                return labelText.indexOf('–ü–æ–¥—ã—Ç–æ–≥') !== -1 || labelText.indexOf('Subtotal') !== -1;
            });
            
            if (subtotalElement.length > 0) {
                var subtotalText = subtotalElement.find('.wc-block-components-totals-item__value').text();
                cartValue = PriceFormatter.extractCleanPrice(subtotalText) || 1000;
            }
        }
        
        console.log('–î–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞:', {
            weight: cartWeight,
            value: cartValue,
            dimensions: dimensions,
            hasRealDimensions: hasValidDimensions,
            packagesCount: packagesCount
        });
        
        return {
            weight: cartWeight,
            value: cartValue,
            dimensions: dimensions,
            hasRealDimensions: hasValidDimensions,
            packagesCount: packagesCount
        };
    }
    
    // ========== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–°–ß–ï–¢–ê –°–¢–û–ò–ú–û–°–¢–ò –î–û–°–¢–ê–í–ö–ò ==========
    
    function calculateDeliveryCost(point, callback) {
        var cartData = getCartDataForCalculation();
        
        if (typeof cdek_ajax === 'undefined' || !cdek_ajax.ajax_url) {
            console.error('CDEK AJAX –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            callback(calculateFallbackCost(point, cartData));
            return;
        }
        
        if (!point || !point.code) {
            console.error('–ù–µ —É–∫–∞–∑–∞–Ω –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –∏–ª–∏ –µ–≥–æ –∫–æ–¥');
            callback(calculateFallbackCost(point, cartData));
            return;
        }
        
        console.log('–ó–∞–ø—Ä–æ—Å —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –ø—É–Ω–∫—Ç–∞:', point.code);
        console.log('–î–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã:', cartData);
        
        $.ajax({
            url: cdek_ajax.ajax_url,
            type: 'POST',
            dataType: 'json',
            timeout: 30000,
            data: {
                action: 'calculate_cdek_delivery_cost',
                point_code: point.code,
                point_data: JSON.stringify(point),
                cart_weight: cartData.weight,
                cart_dimensions: JSON.stringify(cartData.dimensions),
                cart_value: cartData.value,
                has_real_dimensions: cartData.hasRealDimensions ? 1 : 0,
                packages_count: cartData.packagesCount || 1,
                nonce: cdek_ajax.nonce || ''
            },
            success: function(response) {
                console.log('–û—Ç–≤–µ—Ç API —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:', response);
                
                if (response && response.success && response.data && response.data.delivery_sum) {
                    var deliveryCost = parseInt(response.data.delivery_sum);
                    
                    if (cartData.packagesCount > 1) {
                        var costPerPackage = deliveryCost;
                        deliveryCost = deliveryCost * cartData.packagesCount;
                        console.log('üì¶ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞ –¥–ª—è', cartData.packagesCount, '–∫–æ—Ä–æ–±–æ–∫:', costPerPackage, '√ó', cartData.packagesCount, '=', deliveryCost, '—Ä—É–±.');
                    }
                    
                    if (response.data.fallback) {
                        console.warn('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ä–∞—Å—á–µ—Ç:', deliveryCost, '—Ä—É–±.');
                        console.log('–ü—Ä–∏—á–∏–Ω–∞:', response.data.message);
                    } else if (response.data.api_success) {
                        console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ API –°–î–≠–ö:', deliveryCost, '—Ä—É–±.');
                        if (response.data.alternative_tariff) {
                            console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ç–∞—Ä–∏—Ñ:', response.data.alternative_tariff);
                        }
                    } else {
                        console.log('üí∞ –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:', deliveryCost, '—Ä—É–±.');
                    }
                    
                    callback(deliveryCost);
                } else if (!response.success) {
                    console.error('‚ùå API –°–î–≠–ö –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:', response.data ? response.data.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
                    
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –≤–º–µ—Å—Ç–æ –ø–æ–∫–∞–∑–∞ –æ—à–∏–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    var fallbackCost = calculateFallbackCost(point, cartData);
                    console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏:', fallbackCost, '—Ä—É–±.');
                    callback(fallbackCost);
                } else {
                    console.error('‚ùå API –°–î–≠–ö –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç');
                    
                    var fallbackCost = calculateFallbackCost(point, cartData);
                    console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏:', fallbackCost, '—Ä—É–±.');
                    callback(fallbackCost);
                }
            },
            error: function(xhr, status, error) {
                console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API –°–î–≠–ö:', {
                    status: status,
                    error: error,
                    responseText: xhr.responseText,
                    readyState: xhr.readyState
                });
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –≤–º–µ—Å—Ç–æ –ø–æ–∫–∞–∑–∞ –æ—à–∏–±–∫–∏
                var fallbackCost = calculateFallbackCost(point, cartData);
                console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏:', fallbackCost, '—Ä—É–±.');
                callback(fallbackCost);
            }
        });
    }
    
    function calculateFallbackCost(point, cartData) {
        var baseCost = 350; // –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
        
        if (!cartData) {
            return baseCost;
        }
        
        // –ù–∞–¥–±–∞–≤–∫–∞ –∑–∞ –≤–µ—Å
        if (cartData.weight > 500) {
            var extraWeight = Math.ceil((cartData.weight - 500) / 500);
            baseCost += extraWeight * 40;
        }
        
        // –ù–∞–¥–±–∞–≤–∫–∞ –∑–∞ –≥–∞–±–∞—Ä–∏—Ç—ã
        if (cartData.hasRealDimensions && cartData.dimensions) {
            var volume = cartData.dimensions.length * cartData.dimensions.width * cartData.dimensions.height;
            if (volume > 12000) {
                var extraVolume = Math.ceil((volume - 12000) / 6000);
                baseCost += extraVolume * 60;
            }
        }
        
        // –ù–∞–¥–±–∞–≤–∫–∞ –∑–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å
        if (cartData.value > 3000) {
            baseCost += Math.ceil((cartData.value - 3000) / 1000) * 25;
        }
        
        // –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–æ–±–æ–∫
        if (cartData.packagesCount > 1) {
            baseCost = baseCost * cartData.packagesCount;
            console.log('üì¶ Fallback —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞ –¥–ª—è', cartData.packagesCount, '–∫–æ—Ä–æ–±–æ–∫:', baseCost, '—Ä—É–±.');
        }
        
        return baseCost;
    }
    
    // ========== –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò (–£–ü–†–û–©–ï–ù–ù–´–ï –î–õ–Ø –ú–û–ë–ò–õ–¨–ù–´–•) ==========
    
    function parseAddress(address) {
        var result = { city: '', street: '' };
        
        if (!address || address.trim() === '') {
            return result;
        }
        
        var parts = address.split(/[,\s]+/);
        
        for (var i = 0; i < parts.length; i++) {
            var part = parts[i].trim();
            if (!part) continue;
            
            if (!result.city && !result.street) {
                result.city = part;
            } else if (result.city && !result.street) {
                result.street = parts.slice(i).join(' ');
                break;
            }
        }
        
        return result;
    }
    
    function initAddressAutocomplete() {
        var addressInput = $('#shipping-address_1');
        if (addressInput.length === 0) {
            return;
        }
        
        $('#address-select').remove();
        $('#address-suggestions').remove();
        
        setupSmartAutocomplete();
    }
    
    function setupSmartAutocomplete() {
        var addressInput = $('#shipping-address_1');
        if (addressInput.length === 0) {
            return;
        }
        
        var suggestionsContainer = $(`
            <div id="address-suggestions" class="smart-address-suggestions" style="display: none;">
                <div class="suggestions-header">
                    <span class="suggestions-title">–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥</span>
                    <span class="suggestions-count"></span>
                </div>
                <div class="suggestions-list"></div>
                <div class="suggestions-footer">
                    <small>üí° –ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞</small>
                </div>
            </div>
        `);
        
        addressInput.parent().css('position', 'relative');
        addressInput.parent().append(suggestionsContainer);
        
        // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
        if (!$('#smart-search-styles').length) {
            $('head').append(`
                <style id="smart-search-styles">
                .smart-address-suggestions {
                    position: absolute;
                    top: 100%;
                    left: 0;
                    right: 0;
                    background: white;
                    border: 1px solid #e1e5e9;
                    border-radius: 8px;
                    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
                    z-index: 1000;
                    max-height: 250px;
                    overflow-y: auto;
                    margin-top: 4px;
                    -webkit-overflow-scrolling: touch;
                }
                
                .suggestions-header {
                    padding: 10px 12px;
                    border-bottom: 1px solid #f0f0f0;
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    background: #f8f9fa;
                    position: sticky;
                    top: 0;
                }
                
                .suggestions-title {
                    font-weight: 600;
                    color: #333;
                    font-size: 13px;
                }
                
                .suggestions-count {
                    font-size: 11px;
                    color: #666;
                }
                
                .suggestion-item {
                    display: flex;
                    align-items: center;
                    padding: 12px 14px;
                    cursor: pointer;
                    transition: background-color 0.15s ease;
                    border-bottom: 1px solid #f5f5f5;
                    min-height: 44px; /* –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∫–∞—Å–∞–Ω–∏—è */
                }
                
                .suggestion-item:hover,
                .suggestion-item.highlighted {
                    background-color: #f8f9fa;
                }
                
                .suggestion-item:last-child {
                    border-bottom: none;
                }
                
                .suggestion-icon {
                    font-size: 16px;
                    margin-right: 10px;
                    opacity: 0.7;
                }
                
                .suggestion-content {
                    flex: 1;
                }
                
                .suggestion-title {
                    font-weight: 500;
                    color: #333;
                    margin-bottom: 2px;
                    font-size: 14px;
                }
                
                .suggestion-title mark {
                    background-color: #fff3cd;
                    color: #856404;
                    padding: 0 2px;
                    border-radius: 2px;
                }
                
                .suggestion-subtitle {
                    font-size: 12px;
                    color: #666;
                }
                
                .suggestions-footer {
                    padding: 8px 12px;
                    background: #f8f9fa;
                    border-top: 1px solid #f0f0f0;
                    text-align: center;
                    position: sticky;
                    bottom: 0;
                }
                
                .suggestions-footer small {
                    color: #666;
                    font-size: 11px;
                }
                
                @media (max-width: 768px) {
                    .smart-address-suggestions {
                        border-radius: 6px;
                        box-shadow: 0 2px 15px rgba(0, 0, 0, 0.15);
                        max-height: 200px;
                    }
                    
                    .suggestion-item {
                        padding: 14px 12px;
                        min-height: 48px;
                    }
                    
                    .suggestions-header {
                        padding: 8px 12px;
                    }
                }
                </style>
            `);
        }
        
        var currentHighlight = -1;
        var currentSuggestions = [];
        
        addressInput.on('input', function() {
            var query = $(this).val().trim();
            
            if (query.length >= 2) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤
                showSearchLoader();
                
                addressSearch.search(query, function(suggestions) {
                    currentSuggestions = suggestions;
                    currentHighlight = -1;
                    hideSearchLoader();
                    showAddressSuggestions(suggestions, query);
                });
            } else {
                hideAddressSuggestions();
                hideSearchLoader();
            }
        });
        
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
        addressInput.on('keydown', function(e) {
            if (!suggestionsContainer.is(':visible') || window.innerWidth <= 768) return;
            
            switch(e.keyCode) {
                case 38: // Up
                    e.preventDefault();
                    currentHighlight = Math.max(0, currentHighlight - 1);
                    updateHighlight();
                    break;
                case 40: // Down
                    e.preventDefault();
                    currentHighlight = Math.min(currentSuggestions.length - 1, currentHighlight + 1);
                    updateHighlight();
                    break;
                case 13: // Enter
                    e.preventDefault();
                    if (currentHighlight >= 0 && currentSuggestions[currentHighlight]) {
                        selectSuggestion(currentSuggestions[currentHighlight]);
                    }
                    break;
                case 27: // Escape
                    hideAddressSuggestions();
                    break;
            }
        });
        
        function updateHighlight() {
            suggestionsContainer.find('.suggestion-item').removeClass('highlighted');
            if (currentHighlight >= 0) {
                suggestionsContainer.find('.suggestion-item').eq(currentHighlight).addClass('highlighted');
            }
        }
        
        function showSearchLoader() {
            var container = suggestionsContainer.find('.suggestions-list');
            container.html(`
                <div class="suggestion-item">
                    <div class="suggestion-icon">üîÑ</div>
                    <div class="suggestion-content">
                        <div class="suggestion-title">–ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–æ–≤...</div>
                        <div class="suggestion-subtitle">–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥</div>
                    </div>
                </div>
            `);
            suggestionsContainer.find('.suggestions-count').text('–ü–æ–∏—Å–∫...');
            suggestionsContainer.show();
        }
        
        function hideSearchLoader() {
            // –õ–æ–∞–¥–µ—Ä —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        }
        
        function showAddressSuggestions(suggestions, query) {
            var container = suggestionsContainer.find('.suggestions-list');
            container.empty();
            
            if (suggestions.length === 0) {
                container.html('<div class="suggestion-item"><div class="suggestion-content"><div class="suggestion-title">–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</div><div class="suggestion-subtitle">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å</div></div></div>');
                suggestionsContainer.find('.suggestions-count').text('0 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
            } else {
                suggestions.forEach(function(suggestion, index) {
                    var highlightedCity = highlightQuery(suggestion.city, query);
                    
                    var item = $(`
                        <div class="suggestion-item" data-index="${index}">
                            <div class="suggestion-icon">üèôÔ∏è</div>
                            <div class="suggestion-content">
                                <div class="suggestion-title">${highlightedCity}</div>
                                <div class="suggestion-subtitle">–†–æ—Å—Å–∏—è</div>
                            </div>
                        </div>
                    `);
                    
                    item.on('click', function() {
                        selectSuggestion(suggestion);
                    });
                    
                    container.append(item);
                });
                
                suggestionsContainer.find('.suggestions-count').text(`${suggestions.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
            }
            
            suggestionsContainer.show();
        }
        
        function highlightQuery(text, query) {
            if (!query || !text) return text;
            
            var regex = new RegExp(`(${query})`, 'gi');
            return text.replace(regex, '<mark>$1</mark>');
        }
        
        function selectSuggestion(suggestion) {
            // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –µ—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω —Ç–æ—Ç –∂–µ –≥–æ—Ä–æ–¥
            if (window.lastSelectedCity === suggestion.city && selectedPoint) {
                hideAddressSuggestions();
                return;
            }
            
            addressInput.val(suggestion.city);
            hideAddressSuggestions();
            
            saveRecentSearch(suggestion);
            
            // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
            window.lastSelectedCity = suggestion.city;
            
            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤—ã–±–æ—Ä –ü–í–ó —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–º–µ–Ω–µ –≥–æ—Ä–æ–¥–∞
            if (window.currentSearchCity && window.currentSearchCity !== suggestion.city) {
                clearSelectedPoint();
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –ü–í–ó
            showPvzLoader();
            
            debouncer.debounce('cdek-search', () => {
                searchCdekPoints(suggestion.city);
            }, 50, 6);
        }
        
        function saveRecentSearch(suggestion) {
            try {
                var recentSearches = JSON.parse(localStorage.getItem('cdek_recent_searches') || '[]');
                
                recentSearches = recentSearches.filter(item => item.city !== suggestion.city);
                
                recentSearches.unshift({
                    city: suggestion.city,
                    timestamp: Date.now()
                });
                
                recentSearches = recentSearches.slice(0, 5);
                
                localStorage.setItem('cdek_recent_searches', JSON.stringify(recentSearches));
            } catch (error) {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–π –ø–æ–∏—Å–∫');
            }
        }
        
        function hideAddressSuggestions() {
            suggestionsContainer.hide();
            currentHighlight = -1;
        }
        
        $(document).on('click', function(e) {
            if (!$(e.target).closest('#address-suggestions, #shipping-address_1').length) {
                hideAddressSuggestions();
            }
        });
    }
    
    // ========== –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò (–°–û–ö–†–ê–©–ï–ù–ù–´–ï) ==========
    
    function initYandexMap() {
        if (cdekMap) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ª–∏ –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç
        if (window.yandexMapsLoadError) {
            console.warn('–°–î–≠–ö: –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
            showMapFallback();
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ymaps —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        var maxAttempts = 50; // 10 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
        var attempts = 0;
        
        function checkYmaps() {
            attempts++;
            
            if (typeof ymaps !== 'undefined' && ymaps.Map) {
                initMapContainer();
            } else if (attempts < maxAttempts) {
                setTimeout(checkYmaps, 200);
            } else {
                console.warn('–°–î–≠–ö: –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –∑–∞ 10 —Å–µ–∫—É–Ω–¥, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
                showMapFallback();
            }
        }
        
        checkYmaps();
    }
    
    function initMapContainer() {
        var mapContainer = document.getElementById('cdek-map');
        if (!mapContainer) {
            setTimeout(initYandexMap, 500);
            return;
        }
        
        mapContainer.style.cssText = 'display: block !important; width: 100% !important; height: 450px !important; visibility: visible !important; position: relative !important;';
        
        var checkContainer = function() {
            if (mapContainer.offsetWidth > 0 && mapContainer.offsetHeight > 0) {
                try {
                    ymaps.ready(function() {
                        cdekMap = new ymaps.Map(mapContainer, {
                            center: [55.753994, 37.622093],
                            zoom: 10,
                            controls: ['zoomControl', 'searchControl']
                        });
                        
                        console.log('‚úÖ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
                        
                        if (cdekPoints && cdekPoints.length > 0) {
                            displayCdekPoints(cdekPoints);
                        }
                    });
                } catch (error) {
                    console.error('–°–î–≠–ö: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã:', error);
                    showMapFallback();
                }
            } else {
                setTimeout(checkContainer, 300);
            }
        };
        
        setTimeout(checkContainer, 200);
    }
    
    function showMapFallback() {
        var mapContainer = document.getElementById('cdek-map');
        if (!mapContainer) return;
        
        mapContainer.innerHTML = `
            <div style="
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                height: 450px;
                background: #f8f9fa;
                border: 2px dashed #dee2e6;
                border-radius: 8px;
                color: #6c757d;
                text-align: center;
                padding: 20px;
            ">
                <div style="font-size: 48px; margin-bottom: 20px;">üó∫Ô∏è</div>
                <h4 style="margin: 0 0 10px 0; color: #495057;">–ö–∞—Ä—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</h4>
                <p style="margin: 0 0 15px 0; font-size: 14px;">–Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ</p>
                <div id="fallback-points-list" style="
                    max-width: 600px;
                    max-height: 300px;
                    overflow-y: auto;
                    background: white;
                    border: 1px solid #dee2e6;
                    border-radius: 4px;
                    padding: 15px;
                    text-align: left;
                    width: 100%;
                "></div>
            </div>
        `;
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—É–Ω–∫—Ç—ã –≤—ã–¥–∞—á–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö —Å–ø–∏—Å–∫–æ–º
        if (cdekPoints && cdekPoints.length > 0) {
            displayPointsAsList();
        }
    }
    
    function displayPointsAsList() {
        var listContainer = document.getElementById('fallback-points-list');
        if (!listContainer || !cdekPoints) return;
        
        var html = '<h5 style="margin: 0 0 15px 0;">–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –≤—ã–¥–∞—á–∏:</h5>';
        
        cdekPoints.slice(0, 10).forEach(function(point, index) {
            var pointName = point.name || '–ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏';
            var address = '';
            
            if (point.location && point.location.address_full) {
                address = point.location.address_full;
            } else if (point.location && point.location.address) {
                address = point.location.address;
            }
            
            html += `
                <div class="fallback-point-item" style="
                    padding: 10px;
                    margin-bottom: 10px;
                    border: 1px solid #e9ecef;
                    border-radius: 4px;
                    cursor: pointer;
                    transition: background-color 0.2s;
                " data-point-index="${index}" onclick="selectPointFromList(${index})">
                    <div style="font-weight: bold; margin-bottom: 5px;">${pointName}</div>
                    <div style="font-size: 12px; color: #6c757d;">${address}</div>
                    <div style="font-size: 12px; color: #007cba;">–ö–æ–¥: ${point.code}</div>
                </div>
            `;
        });
        
        listContainer.innerHTML = html;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        $(document).on('mouseenter', '.fallback-point-item', function() {
            $(this).css('background-color', '#f8f9fa');
        }).on('mouseleave', '.fallback-point-item', function() {
            $(this).css('background-color', 'transparent');
        });
    }
    
    function selectPointFromList(index) {
        if (cdekPoints && cdekPoints[index]) {
            selectCdekPoint(cdekPoints[index]);
        }
    }
    
    // –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–ª–æ–±–∞–ª—å–Ω–æ–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ onclick
    window.selectPointFromList = selectPointFromList;
    
    function geocodeAddress(address, callback) {
        if (typeof ymaps !== 'undefined') {
            ymaps.geocode(address, { results: 1 }).then(function(res) {
                if (res.geoObjects.getLength() > 0) {
                    var firstGeoObject = res.geoObjects.get(0);
                    var coords = firstGeoObject.geometry.getCoordinates();
                    callback(coords);
                } else {
                    callback(null);
                }
            }).catch(function(error) {
                callback(null);
            });
        } else {
            callback(null);
        }
    }
    
    function calculateDistance(lat1, lon1, lat2, lon2) {
        var R = 6371;
        var dLat = (lat2 - lat1) * Math.PI / 180;
        var dLon = (lon2 - lon1) * Math.PI / 180;
        var a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                Math.sin(dLon/2) * Math.sin(dLon/2);
        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
        return R * c;
    }
    
    function searchCdekPoints(address) {
        var parsedAddress = parseAddress(address);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—â–µ–º –ª–∏ –º—ã —Ç–æ—Ç –∂–µ –≥–æ—Ä–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ
        if (window.currentSearchCity === parsedAddress.city && cdekPoints && cdekPoints.length > 0) {
            console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ü–í–ó –¥–ª—è –≥–æ—Ä–æ–¥–∞:', parsedAddress.city);
            hidePvzLoader();
            displayCdekPoints(cdekPoints);
            return;
        }
        
        // –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä –ü–í–ó —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–º–µ–Ω–µ –≥–æ—Ä–æ–¥–∞
        if (window.currentSearchCity && window.currentSearchCity !== parsedAddress.city) {
            clearSelectedPoint();
        }
        
        window.currentSearchCity = parsedAddress.city;
        window.currentSearchStreet = parsedAddress.street;
        
        console.log('üîç –ü–æ–∏—Å–∫ –ü–í–ó –¥–ª—è –≥–æ—Ä–æ–¥–∞:', parsedAddress.city);
        
        geocodeAddress(address, function(coords) {
            window.currentSearchCoordinates = coords;
            performCdekSearch();
        });
    }
    

    
    function performCdekSearch() {
        if (typeof cdek_ajax === 'undefined') return;
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≥–æ—Ä–æ–¥, –µ—Å–ª–∏ –æ–Ω –∏–∑–≤–µ—Å—Ç–µ–Ω
        var searchAddress = '–†–æ—Å—Å–∏—è';
        if (window.currentSearchCity) {
            searchAddress = window.currentSearchCity;
        }
        
        console.log('üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –°–î–≠–ö –¥–ª—è –∞–¥—Ä–µ—Å–∞:', searchAddress);
        
        $.ajax({
            url: cdek_ajax.ajax_url,
            type: 'POST',
            dataType: 'json',
            timeout: 30000,
            data: {
                action: 'get_cdek_points',
                address: searchAddress,
                nonce: cdek_ajax.nonce
            },
            success: function(response) {
                hidePvzLoader();
                if (response.success && response.data) {
                    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ü–í–ó –æ—Ç API:', response.data.length);
                    
                    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—É–Ω–∫—Ç–æ–≤
                    if (response.data.length > 0) {
                        console.log('üîç –ü–µ—Ä–≤—ã–µ 3 –ø—É–Ω–∫—Ç–∞ –æ—Ç API:');
                        for (var i = 0; i < Math.min(3, response.data.length); i++) {
                            var point = response.data[i];
                            console.log('–ü—É–Ω–∫—Ç ' + (i+1) + ':', {
                                code: point.code,
                                name: point.name,
                                type: point.type,
                                city: point.location ? point.location.city : '–Ω–µ —É–∫–∞–∑–∞–Ω',
                                address: point.location ? point.location.address : '–Ω–µ —É–∫–∞–∑–∞–Ω',
                                address_comment: point.address_comment
                            });
                        }
                        
                        // –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –ø—É–Ω–∫—Ç –≤ –¢—é–º–µ–Ω–∏ –ø–æ –∞–¥—Ä–µ—Å—É –ó–µ–ª–∏–Ω—Å–∫–æ–≥–æ
                        var tyumenPoints = response.data.filter(function(point) {
                            var hasZelinsky = false;
                            if (point.location && point.location.address) {
                                hasZelinsky = point.location.address.toLowerCase().includes('–∑–µ–ª–∏–Ω—Å–∫');
                            }
                            if (!hasZelinsky && point.address_comment) {
                                hasZelinsky = point.address_comment.toLowerCase().includes('–∑–µ–ª–∏–Ω—Å–∫');
                            }
                            if (!hasZelinsky && point.name) {
                                hasZelinsky = point.name.toLowerCase().includes('–∑–µ–ª–∏–Ω—Å–∫');
                            }
                            return hasZelinsky;
                        });
                        
                        if (tyumenPoints.length > 0) {
                            console.log('üéØ –ù–∞–π–¥–µ–Ω—ã –ø—É–Ω–∫—Ç—ã —Å –∞–¥—Ä–µ—Å–æ–º –ó–µ–ª–∏–Ω—Å–∫–æ–≥–æ:', tyumenPoints);
                        } else {
                            console.log('‚ùå –ü—É–Ω–∫—Ç –ø–æ –∞–¥—Ä–µ—Å—É –ó–µ–ª–∏–Ω—Å–∫–æ–≥–æ –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ API');
                        }
                    }
                    
                    displayCdekPoints(response.data);
                } else {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ü–í–ó:', response);
                    showPvzError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—É–Ω–∫—Ç—ã –≤—ã–¥–∞—á–∏');
                }
            },
            error: function(xhr, status, error) {
                hidePvzLoader();
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–Ω–∫—Ç–æ–≤ –°–î–≠–ö:', error);
                showPvzError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—É–Ω–∫—Ç–æ–≤ –≤—ã–¥–∞—á–∏');
            }
        });
    }
    
    function displayCdekPoints(points) {
        cdekPoints = points;
        
        if (!cdekMap || typeof ymaps === 'undefined') {
            setTimeout(function() { displayCdekPoints(points); }, 200);
            return;
        }
        
        cdekMap.geoObjects.removeAll();
        
        if (!points || points.length === 0) {
            var cityInfo = window.currentSearchCity ? ` –≤ –≥–æ—Ä–æ–¥–µ "${window.currentSearchCity}"` : '';
            $('#cdek-points-count').text(`–ü—É–Ω–∫—Ç—ã –≤—ã–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã${cityInfo}`);
            return;
        }
        
        var filteredPoints = points.filter(function(point) {
            // –£–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ç–∏–ø—É - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø—É–Ω–∫—Ç—ã –≤—ã–¥–∞—á–∏
            // if (point.type !== 'PVZ' && point.type) return false;
            
            if (window.currentSearchCity) {
                var pointCity = '';
                
                // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ–¥ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª–µ–π
                if (point.location && point.location.city) {
                    pointCity = point.location.city.trim();
                }
                
                // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ location.city, –∏—â–µ–º –≤ address
                if (!pointCity && point.location && point.location.address) {
                    var addressParts = point.location.address.split(',');
                    if (addressParts.length > 0) {
                        pointCity = addressParts[0].trim();
                    }
                }
                
                // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ address, –∏—â–µ–º –≤ name
                if (!pointCity && point.name && point.name.includes(',')) {
                    var nameParts = point.name.split(',');
                    if (nameParts.length >= 2) {
                        pointCity = nameParts[1].trim();
                    }
                }
                
                // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ name, –∏—â–µ–º –≤ –ø–æ–ª–Ω–æ–º –∞–¥—Ä–µ—Å–µ
                if (!pointCity && point.address_comment) {
                    var commentParts = point.address_comment.split(',');
                    if (commentParts.length > 0) {
                        pointCity = commentParts[0].trim();
                    }
                }
                
                if (pointCity) {
                    pointCity = pointCity.replace(/^(–≥\.?\s*|–≥–æ—Ä–æ–¥\s+)/i, '').trim();
                }
                
                var searchCityLower = window.currentSearchCity.toLowerCase().trim();
                var pointCityLower = pointCity.toLowerCase().trim();
                
                // –ë–æ–ª–µ–µ –≥–∏–±–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
                if (pointCityLower && searchCityLower) {
                    if (pointCityLower !== searchCityLower && 
                        !pointCityLower.includes(searchCityLower) && 
                        !searchCityLower.includes(pointCityLower)) {
                        return false;
                    }
                }
            }
            
            return true;
        });
        
        console.log('üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ü–í–ó:');
        console.log('- –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç API:', points.length);
        console.log('- –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', filteredPoints.length);
        console.log('- –ü–æ–∏—Å–∫–æ–≤—ã–π –≥–æ—Ä–æ–¥:', window.currentSearchCity);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤
        if (filteredPoints.length > 0) {
            console.log('- –ü–µ—Ä–≤—ã–µ 3 –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞:');
            for (var i = 0; i < Math.min(3, filteredPoints.length); i++) {
                var point = filteredPoints[i];
                console.log('  –ü—É–Ω–∫—Ç ' + (i+1) + ':', {
                    code: point.code,
                    name: point.name,
                    city: point.location ? point.location.city : '–Ω–µ —É–∫–∞–∑–∞–Ω',
                    address: point.location ? point.location.address : '–Ω–µ —É–∫–∞–∑–∞–Ω'
                });
            }
        }
        
        if (window.currentSearchCoordinates && filteredPoints.length > 0) {
            filteredPoints.sort(function(a, b) {
                var distA = calculateDistance(
                    window.currentSearchCoordinates[0], 
                    window.currentSearchCoordinates[1],
                    a.location.latitude, 
                    a.location.longitude
                );
                var distB = calculateDistance(
                    window.currentSearchCoordinates[0], 
                    window.currentSearchCoordinates[1],
                    b.location.latitude, 
                    b.location.longitude
                );
                return distA - distB;
            });
        }
        
        var maxPoints = 1000; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ü–í–ó
        var pointsToShow = filteredPoints.slice(0, maxPoints);
        
        var pointsInfo = '';
        if (filteredPoints.length > 0) {
            var locationInfo = window.currentSearchCity ? ` –≤ –≥–æ—Ä–æ–¥–µ "${window.currentSearchCity}"` : '';
            pointsInfo = `–ù–∞–π–¥–µ–Ω–æ ${filteredPoints.length} –ø—É–Ω–∫—Ç–æ–≤ –≤—ã–¥–∞—á–∏${locationInfo}`;
            if (filteredPoints.length > maxPoints) {
                pointsInfo += ` (–ø–æ–∫–∞–∑–∞–Ω–æ ${maxPoints} –±–ª–∏–∂–∞–π—à–∏—Ö)`;
            }
        } else {
            var locationInfo = window.currentSearchCity ? ` –≤ –≥–æ—Ä–æ–¥–µ "${window.currentSearchCity}"` : '';
            pointsInfo = `–ü—É–Ω–∫—Ç—ã –≤—ã–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã${locationInfo}`;
        }
        $('#cdek-points-count').text(pointsInfo);
        
        var bounds = [];
        
        pointsToShow.forEach(function(point, index) {
            if (point.location && point.location.latitude && point.location.longitude) {
                var coords = [point.location.latitude, point.location.longitude];
                bounds.push(coords);
                
                var placemark = new ymaps.Placemark(coords, {
                    balloonContent: formatPointInfo(point),
                    hintContent: point.name
                }, {
                    preset: 'islands#redIcon'
                });
                
                placemark.events.add('click', function() {
                    selectCdekPoint(point);
                });
                
                cdekMap.geoObjects.add(placemark);
            }
        });
        
        if (bounds.length > 0) {
            if (bounds.length === 1) {
                cdekMap.setCenter(bounds[0], 14);
            } else {
                var minLat = Math.min.apply(null, bounds.map(function(coord) { return coord[0]; }));
                var maxLat = Math.max.apply(null, bounds.map(function(coord) { return coord[0]; }));
                var minLon = Math.min.apply(null, bounds.map(function(coord) { return coord[1]; }));
                var maxLon = Math.max.apply(null, bounds.map(function(coord) { return coord[1]; }));
                
                var centerLat = (minLat + maxLat) / 2;
                var centerLon = (minLon + maxLon) / 2;
                
                var latDiff = maxLat - minLat;
                var lonDiff = maxLon - minLon;
                var maxDiff = Math.max(latDiff, lonDiff);
                
                var zoom = 12;
                if (maxDiff < 0.01) zoom = 15;
                else if (maxDiff < 0.05) zoom = 13;
                else if (maxDiff < 0.1) zoom = 12;
                else if (maxDiff < 0.5) zoom = 10;
                else zoom = 8;
                
                cdekMap.setCenter([centerLat, centerLon], zoom);
            }
        } else if (window.currentSearchCoordinates) {
            cdekMap.setCenter(window.currentSearchCoordinates, 12);
        }
    }
    
    function selectCdekPoint(point) {
        selectedPoint = point;
        
        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ü–í–ó —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤
        window.lastSelectedPointCode = point.code;
        
        $('#cdek-point-info').html(formatPointInfo(point));
        $('#cdek-selected-point').show();
        
        if (cdekMap && point.location) {
            cdekMap.setCenter([point.location.latitude, point.location.longitude], 15);
        }
        
        if ($('#cdek-selected-point-code').length === 0) {
            $('<input>').attr({
                type: 'hidden',
                id: 'cdek-selected-point-code',
                name: 'cdek_selected_point_code',
                value: point.code
            }).appendTo('form.checkout, form.woocommerce-checkout');
        } else {
            $('#cdek-selected-point-code').val(point.code);
        }
        
        if ($('#cdek-selected-point-data').length === 0) {
            $('<input>').attr({
                type: 'hidden',
                id: 'cdek-selected-point-data',
                name: 'cdek_selected_point_data',
                value: JSON.stringify(point)
            }).appendTo('form.checkout, form.woocommerce-checkout');
        } else {
            $('#cdek-selected-point-data').val(JSON.stringify(point));
        }
        
        updateOrderSummary(point);
        
        console.log('‚úÖ –í—ã–±—Ä–∞–Ω –ü–í–ó:', point.name, '(–∫–æ–¥:', point.code + ')');
    }
    
    function clearSelectedPoint() {
        selectedPoint = null;
        window.lastSelectedPointCode = null;
        
        $('#cdek-selected-point').hide();
        $('#cdek-point-info').html('');
        
        $('#cdek-selected-point-code').remove();
        $('#cdek-selected-point-data').remove();
        $('#cdek-delivery-cost').remove();
        
        resetCdekShippingToDefault();
        
        console.log('üóëÔ∏è –û—á–∏—â–µ–Ω –≤—ã–±–æ—Ä –ü–í–ó');
    }
    
    function formatPointInfo(point) {
        var pointName = point.name || '–ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏';
        if (pointName.includes(',')) {
            pointName = pointName.split(',').slice(1).join(',').trim();
        }
        
        var html = `<strong>${pointName}</strong><br>`;
        
        if (point.location && point.location.address_full) {
            html += `–ê–¥—Ä–µ—Å: ${point.location.address_full}<br>`;
        } else if (point.address) {
            html += `–ê–¥—Ä–µ—Å: ${point.address}<br>`;
        }
        
        if (point.phones && Array.isArray(point.phones) && point.phones.length > 0) {
            var phoneNumbers = point.phones.map(function(phone) {
                return phone.number || phone;
            }).join(', ');
            html += `–¢–µ–ª–µ—Ñ–æ–Ω: ${phoneNumbers}<br>`;
        } else if (point.phone) {
            html += `–¢–µ–ª–µ—Ñ–æ–Ω: ${point.phone}<br>`;
        }
        
        html += `–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: ${formatWorkTime(point.work_time, point.work_time_list)}<br>`;
        
        if (point.code) {
            html += `–ö–æ–¥: ${point.code}<br>`;
        }
        
        return html;
    }
    
    function formatWorkTime(workTime, workTimeList) {
        if (workTimeList && Array.isArray(workTimeList) && workTimeList.length > 0) {
            var days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
            var schedule = '';
            
            workTimeList.forEach(function(time) {
                if (time.day !== undefined && time.time) {
                    schedule += days[time.day - 1] + ': ' + time.time + ' ';
                }
            });
            
            return schedule || '–ù–µ —É–∫–∞–∑–∞–Ω';
        }
        
        if (workTime && typeof workTime === 'string') {
            return workTime;
        }
        
        return '–ù–µ —É–∫–∞–∑–∞–Ω';
    }
    
    function updateOrderSummary(point) {
        showDeliveryCalculationLoader();
        
        calculateDeliveryCost(point, function(deliveryCost) {
            hideDeliveryCalculationLoader();
            
            var allShippingBlocks = $();
            
            var shippingBlocks1 = $('.wc-block-components-totals-shipping .wc-block-components-totals-item');
            var shippingBlocks2 = $('.wp-block-woocommerce-checkout-order-summary-shipping-block .wc-block-components-totals-item');
            var shippingBlocks3 = $('.wc-block-components-totals-item').filter(function() {
                var labelText = $(this).find('.wc-block-components-totals-item__label').text();
                return labelText.indexOf('–°–î–≠–ö') !== -1 || 
                       labelText.indexOf('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏') !== -1 ||
                       labelText.indexOf('–ú–∞—Ö–∞—á–∫–∞–ª–∞') !== -1 ||
                       labelText.indexOf('–ú–æ—Å–∫–≤–∞') !== -1 ||
                       labelText.indexOf('–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥') !== -1 ||
                       labelText.indexOf('–°–∞—Ä–∞—Ç–æ–≤') !== -1 ||
                       (labelText.match(/^[–ê-–Ø–∞-—è\s,\.\-]+$/) && labelText.includes(','));
            });
            
            allShippingBlocks = shippingBlocks1.add(shippingBlocks2).add(shippingBlocks3);
            allShippingBlocks = allShippingBlocks.filter(function(index, element) {
                return allShippingBlocks.index(element) === index;
            });
            
            allShippingBlocks.each(function() {
                updateShippingBlock($(this), point, deliveryCost);
            });
            
            updateOrderTotal(deliveryCost);
        });
    }
    
    function updateShippingBlock(block, point, deliveryCost) {
        var pointName = point.name || '–ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏';
        if (pointName.includes(',')) {
            pointName = pointName.split(',').slice(1).join(',').trim();
        }
        
        var displayName = pointName;
        if (point.location && point.location.city) {
            displayName = point.location.city + ', ' + pointName.replace(point.location.city, '').replace(/^[,\s]+/, '');
        }
        
        var address = '';
        if (point.location && point.location.address_full) {
            address = point.location.address_full;
        } else if (point.location && point.location.address) {
            address = point.location.address;
        } else if (point.address) {
            address = point.address;
        }
        
        domBatcher.add(() => {
            var labelElement = block.find('.wc-block-components-totals-item__label');
            var valueElement = block.find('.wc-block-components-totals-item__value');
            var descriptionElement = block.find('.wc-block-components-totals-item__description');
            
            labelElement.text(displayName);
            valueElement.text(deliveryCost + ' —Ä—É–±.');
            
            if (address) {
                if (descriptionElement.length === 0) {
                    descriptionElement = $('<div class="wc-block-components-totals-item__description"></div>');
                    block.append(descriptionElement);
                } else if (descriptionElement.length > 1) {
                    descriptionElement.slice(1).remove();
                    descriptionElement = descriptionElement.first();
                }
                descriptionElement.html('<small style="color: #666;">' + address + '</small>');
            }
        });
        
        window.currentDeliveryCost = deliveryCost;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        if ($('#cdek-delivery-cost').length === 0) {
            $('<input>').attr({
                type: 'hidden',
                id: 'cdek-delivery-cost',
                name: 'cdek_delivery_cost',
                value: deliveryCost
            }).appendTo('form.checkout, form.woocommerce-checkout');
        } else {
            $('#cdek-delivery-cost').val(deliveryCost);
        }
        
        console.log('üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞:', deliveryCost, '—Ä—É–±.');
        
        $(document.body).trigger('updated_checkout');
        $(document.body).trigger('updated_cart_totals');
    }
    
    function showDeliveryCalculationLoader() {
        var shippingBlocks = $('.wc-block-components-totals-item').filter(function() {
            var labelText = $(this).find('.wc-block-components-totals-item__label').text();
            return labelText.indexOf('–°–î–≠–ö') !== -1 || labelText.indexOf('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏') !== -1;
        });
        
        shippingBlocks.find('.wc-block-components-totals-item__value').html('<span style="color: #666;">–†–∞—Å—á–µ—Ç...</span>');
    }
    
    function hideDeliveryCalculationLoader() {
        // Loader —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    }
    
    function showPvzLoader() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä –≤ –±–ª–æ–∫–µ —Å –∫–∞—Ä—Ç–æ–π
        var mapContainer = $('#cdek-map-container');
        if (mapContainer.length > 0) {
            if ($('#pvz-loader').length === 0) {
                var loader = $(`
                    <div id="pvz-loader" style="
                        position: absolute;
                        top: 0;
                        left: 0;
                        right: 0;
                        bottom: 0;
                        background: rgba(255, 255, 255, 0.9);
                        display: flex;
                        flex-direction: column;
                        align-items: center;
                        justify-content: center;
                        z-index: 1000;
                        border-radius: 8px;
                    ">
                        <div style="
                            width: 40px;
                            height: 40px;
                            border: 3px solid #f3f3f3;
                            border-top: 3px solid #007cba;
                            border-radius: 50%;
                            animation: spin 1s linear infinite;
                            margin-bottom: 15px;
                        "></div>
                        <div style="
                            color: #666;
                            font-size: 14px;
                            text-align: center;
                        ">
                            <div style="font-weight: 500; margin-bottom: 4px;">–ó–∞–≥—Ä—É–∂–∞–µ–º –ø—É–Ω–∫—Ç—ã –≤—ã–¥–∞—á–∏...</div>
                            <div style="font-size: 12px; opacity: 0.8;">–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥</div>
                        </div>
                    </div>
                `);
                mapContainer.css('position', 'relative').append(loader);
                
                // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                if (!$('#pvz-loader-styles').length) {
                    $('head').append(`
                        <style id="pvz-loader-styles">
                        @keyframes spin {
                            0% { transform: rotate(0deg); }
                            100% { transform: rotate(360deg); }
                        }
                        </style>
                    `);
                }
            }
        }
        
        // –¢–∞–∫–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä –≤ —Å—á–µ—Ç—á–∏–∫–µ –ø—É–Ω–∫—Ç–æ–≤
        $('#cdek-points-count').html('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—É–Ω–∫—Ç—ã –≤—ã–¥–∞—á–∏...');
    }
    
    function hidePvzLoader() {
        $('#pvz-loader').remove();
    }
    
    function showPvzError(message) {
        $('#cdek-points-count').html('‚ùå ' + message);
        setTimeout(() => {
            $('#cdek-points-count').html('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—É–Ω–∫—Ç–æ–≤ –≤—ã–¥–∞—á–∏');
        }, 3000);
    }
    
    function updateOrderTotal(deliveryCost) {
        domBatcher.add(() => {
            var totalBlock = $('.wc-block-components-totals-item').filter(function() {
                var labelText = $(this).find('.wc-block-components-totals-item__label').text();
                return labelText.indexOf('–ò—Ç–æ–≥–æ') !== -1 || labelText.indexOf('Total') !== -1;
            });
            
            if (totalBlock.length > 0) {
                totalBlock = totalBlock.first();
                
                var subtotalBlock = $('.wc-block-components-totals-item').filter(function() {
                    var labelText = $(this).find('.wc-block-components-totals-item__label').text();
                    return labelText.indexOf('–ü–æ–¥—ã—Ç–æ–≥') !== -1 || labelText.indexOf('Subtotal') !== -1;
                });
                
                if (subtotalBlock.length > 0) {
                    var subtotalText = subtotalBlock.find('.wc-block-components-totals-item__value').text();
                    var subtotal = PriceFormatter.extractCleanPrice(subtotalText);
                    
                    var taxBlock = $('.wc-block-components-totals-taxes .wc-block-components-totals-item__value');
                    var tax = 0;
                    if (taxBlock.length > 0) {
                        var taxText = taxBlock.text();
                        tax = PriceFormatter.extractCleanPrice(taxText);
                    }
                    
                    var newTotal = subtotal + deliveryCost + tax;
                    
                    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–æ–ª—å—à–∏–µ —Å—É–º–º—ã —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                    var formattedTotal = newTotal.toLocaleString('ru-RU') + ' —Ä—É–±.';
                    
                    var totalValueElement = totalBlock.find('.wc-block-components-totals-item__value');
                    var currentText = totalValueElement.text().trim();
                    
                    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –∞ –Ω–µ —Å—Ç—Ä–æ–∫–∏
                    var currentValue = PriceFormatter.extractCleanPrice(currentText);
                    
                    if (Math.abs(currentValue - newTotal) > 1) { // –†–∞–∑–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ 1 —Ä—É–±–ª—è
                        totalValueElement.text(formattedTotal);
                        console.log('üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞:', formattedTotal, '(–±—ã–ª–æ:', currentText + ')');
                        console.log('üí° –†–∞—Å—á–µ—Ç: –ø–æ–¥—ã—Ç–æ–≥', subtotal, '+ –¥–æ—Å—Ç–∞–≤–∫–∞', deliveryCost, '+ –Ω–∞–ª–æ–≥', tax, '=', newTotal);
                    }
                }
            }
        });
    }
    
    function removeDuplicateTotalElements() {
        domBatcher.add(() => {
            var totalBlocks = $('.wc-block-components-totals-item').filter(function() {
                var labelText = $(this).find('.wc-block-components-totals-item__label').text();
                return labelText.indexOf('–ò—Ç–æ–≥–æ') !== -1 || labelText.indexOf('Total') !== -1;
            });
            
            if (totalBlocks.length > 1) {
                console.log('üîç –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º—ã:', totalBlocks.length);
                totalBlocks.slice(1).remove();
                console.log('‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–¥–∞–ª–µ–Ω—ã');
            }
        });
    }
    
    function hideCdekShippingBlock() {
        if (window.lastHideCall && (Date.now() - window.lastHideCall) < 1000) return;
        window.lastHideCall = Date.now();
        
        var cdekInputs = $('input[value*="cdek_delivery"]');
        
        cdekInputs.each(function() {
            var $this = $(this);
            var radioControl = $this.closest('.wc-block-components-radio-control');
            var package = $this.closest('.wc-block-components-shipping-rates-control__package');
            var control = $this.closest('.wc-block-components-shipping-rates-control');
            var label = $this.closest('label');
            
            if (radioControl.length) radioControl.hide();
            if (package.length) package.hide();
            if (control.length) control.hide();
            if (label.length) label.hide();
            
            $this.css({
                'display': 'none !important',
                'visibility': 'hidden !important',
                'position': 'absolute',
                'left': '-9999px'
            });
        });
    }
    
    function resetCdekShippingToDefault() {
        domBatcher.add(() => {
            $('.wc-block-components-totals-item').each(function() {
                var $item = $(this);
                var labelElement = $item.find('.wc-block-components-totals-item__label');
                var labelText = labelElement.text();
                
                if (labelText.indexOf('–°–î–≠–ö') !== -1 || 
                    labelText.indexOf('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏') !== -1 ||
                    labelText.includes('–ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏')) {
                    
                    labelElement.text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏');
                    var valueElement = $item.find('.wc-block-components-totals-item__value');
                    valueElement.text('');
                    var descriptionElement = $item.find('.wc-block-components-totals-item__description');
                    descriptionElement.html('');
                }
            });
        });
        
        window.currentDeliveryCost = 0;
        updateOrderTotal(0);
    }
    
    function initCdekDelivery() {
        if (isInitialized) return;
        
        removeDuplicateTotalElements();
        hideCdekShippingBlock();
        
        if ($('#cdek-map-container').length === 0) {
            var mapHtml = `
                <div id="cdek-map-container" style="margin-top: 20px; display: block !important;">
                    <h4>–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –°–î–≠–ö –Ω–∞ –∫–∞—Ä—Ç–µ:</h4>
                    <div id="cdek-points-info" style="margin-bottom: 10px; padding: 10px; background: #e3f2fd; border: 1px solid #2196f3; border-radius: 4px;">
                        <strong>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</strong>
                        <div id="cdek-points-count">–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –ø–æ–ª–µ –∞–¥—Ä–µ—Å–∞ –≤—ã—à–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—É–Ω–∫—Ç–æ–≤ –≤—ã–¥–∞—á–∏</div>
                    </div>
                    <div id="cdek-selected-point" style="margin-bottom: 10px; padding: 10px; background: #f8f9fa; border: 1px solid #dee2e6; border-radius: 4px; display: none;">
                        <strong>–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É–Ω–∫—Ç:</strong>
                        <div id="cdek-point-info"></div>
                    </div>
                    <div id="cdek-map" style="width: 100%; height: 450px; border: 1px solid #ddd; border-radius: 6px; display: block !important;"></div>
                    <p style="font-size: 14px; color: #666; margin-top: 10px;">
                        üí° –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –ø–æ–ª–µ –∞–¥—Ä–µ—Å–∞ –≤—ã—à–µ, –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
                    </p>
                </div>
            `;
            
            var mapBlock = $('.wp-block-cdek-checkout-map-block');
            var insertTarget = null;
            
            if (mapBlock.length > 0) {
                insertTarget = mapBlock;
                insertTarget.html(mapHtml);
            } else {
                var addressForm = $('.wc-block-components-address-form');
                var shippingBlock = $('.wp-block-woocommerce-checkout-shipping-address-block');
                var shippingControl = $('.wc-block-components-shipping-rates-control');
                
                insertTarget = addressForm.length ? addressForm : 
                    shippingBlock.length ? shippingBlock :
                    shippingControl.first();
                    
                if (insertTarget.length > 0) {
                    insertTarget.after(mapHtml);
                }
            }
        }
        
        $('#cdek-map-container').show();
        
        setTimeout(() => initYandexMap(), 100);
        setTimeout(() => initAddressAutocomplete(), 200);
        
        var currentAddress = $('#shipping-address_1').val();
        if (currentAddress) {
            var city = currentAddress.split(',')[0].trim();
            if (city.length > 2) {
                setTimeout(() => searchCdekPoints(city), 200);
            }
        }
        
        isInitialized = true;
        
        setTimeout(() => {
            removeDuplicateTotalElements();
            fixExistingDuplicatedPrices();
        }, 500);
        
        console.log('‚úÖ –°–î–≠–ö –¥–æ—Å—Ç–∞–≤–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }
    
    function hideUnnecessaryFields() {
        domBatcher.add(() => {
            var fieldsToHide = [
                
            ];
            
            fieldsToHide.forEach(function(selector) {
                $(selector).hide().closest('').hide();
            });
            
            $('').hide();
            
            $('label').each(function() {
                var text = $(this).text().toLowerCase();
                if ((text.includes('–≥–æ—Ä–æ–¥') && !text.includes('–∞–¥—Ä–µ—Å')) || 
                    text.includes('–æ–±–ª–∞—Å—Ç—å') || 
                    text.includes('—Ä–∞–π–æ–Ω') || 
                    text.includes('–∏–Ω–¥–µ–∫—Å') || 
                    text.includes('–ø–æ—á—Ç–æ–≤—ã–π')) {
                    $(this).closest('').hide();
                }
            });
        });
    }
    
    // ========== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ==========
    
    interceptPriceUpdates();
    startPriceMonitoring();
    
    $(document).on('change', 'input[name="shipping_method[0]"], input[name*="radio-control"], input[value*="cdek_delivery"]', function() {
        if ($(this).val().indexOf('cdek_delivery') !== -1) {
            debouncer.debounce('init-cdek', () => initCdekDelivery(), 50, 8);
        } else if ($(this).attr('name') && $(this).attr('name').indexOf('shipping_method') !== -1) {
            $('#cdek-map-container').hide();
            resetCdekShippingToDefault();
        }
    });
    
    $(document).on('click', 'input[value*="cdek_delivery"]', function() {
        debouncer.debounce('init-cdek-click', () => initCdekDelivery(), 50, 7);
    });
    
    $(document).on('input', '#shipping-address_1', function() {
        var address = $(this).val();
        var city = address.split(',')[0].trim();
        
        if (city.length > 2) {
            debouncer.debounce('address-change', () => searchCdekPoints(city), 200, 4);
        }
    });
    

    
    var observer = new MutationObserver(function(mutations) {
        var needsUpdate = false;
        
        mutations.forEach(function(mutation) {
            if (mutation.type === 'childList') {
                hideUnnecessaryFields();
                
                $('.wc-block-components-totals-item__label').each(function() {
                    var text = $(this).text();
                    if (text.includes('–°–î–≠–ö') && text.includes('–ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏')) {
                        $(this).text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏');
                    }
                });
                
                var cdekMethod = $('input[value*="cdek_delivery"]');
                if (cdekMethod.length > 0 && !isInitialized) {
                    needsUpdate = true;
                }
            }
        });
        
        if (needsUpdate) {
            debouncer.debounce('mutation-init', () => {
                hideCdekShippingBlock();
                var cdekSelected = $('input[value*="cdek_delivery"]:checked');
                
                if (cdekSelected.length > 0 && $('#cdek-map-container').length === 0) {
                    initCdekDelivery();
                } else if ($('#cdek-map-container').length === 0) {
                    initCdekDelivery();
                }
            }, 100, 5);
        }
    });
    
    observer.observe(document.body, {
        childList: true,
        subtree: true
    });
    
    // –ù–∞—á–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    setTimeout(() => {
        hideUnnecessaryFields();
        
        $('.wc-block-components-totals-item__label').each(function() {
            var text = $(this).text();
            if (text.includes('–°–î–≠–ö') && text.includes('–ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏')) {
                $(this).text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏');
            }
        });
    }, 100);
    
    setTimeout(() => {
        hideUnnecessaryFields();
        initAddressAutocomplete();
        
        var cdekMethod = $('input[value*="cdek_delivery"]');
        if (cdekMethod.length > 0) {
            hideCdekShippingBlock();
            initCdekDelivery();
        }
    }, 500);
    
    setTimeout(() => {
        hideUnnecessaryFields();
        
        if ($('#address-select').length === 0 && $('#address-suggestions').length === 0) {
            initAddressAutocomplete();
        }
    }, 1000);
    
    setTimeout(() => {
        hideUnnecessaryFields();
        
        if ($('input[value*="cdek_delivery"]').length > 0 && $('#cdek-map-container').length === 0 && !isInitialized) {
            initCdekDelivery();
        }
        
        removeDuplicateTotalElements();
        fixExistingDuplicatedPrices();
    }, 1000);
    
    // –£—Å–∫–æ—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω
    const priceCheckInterval = window.innerWidth <= 768 ? 1500 : 1000;
    setInterval(() => fixExistingDuplicatedPrices(), priceCheckInterval);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∏—Å–∫–∞
    window.lastSelectedCity = null;
    window.lastSelectedPointCode = null;
    window.currentSearchCity = null;
    
    console.log('üöÄ –°–î–≠–ö Delivery Fixed v2.1 –∑–∞–≥—Ä—É–∂–µ–Ω');
    console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: —É–º–Ω—ã–π –ø–æ–∏—Å–∫, –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å');
    console.log('üîç –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤');
    console.log('üèôÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 1000+ –≥–æ—Ä–æ–¥–æ–≤ –†–æ—Å—Å–∏–∏');
    console.log('üì± –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤');
});
