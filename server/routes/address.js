const express = require('express');
const router = express.Router();

// –°–ø–∏—Å–æ–∫ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞)
const RUSSIAN_CITIES = [
  // –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –∏ –º–∏–ª–ª–∏–æ–Ω–Ω–∏–∫–∏
  '–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–ö–∞–∑–∞–Ω—å', '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥',
  '–ß–µ–ª—è–±–∏–Ω—Å–∫', '–°–∞–º–∞—Ä–∞', '–£—Ñ–∞', '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É', '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä', '–ü–µ—Ä–º—å', '–í–æ—Ä–æ–Ω–µ–∂',
  '–í–æ–ª–≥–æ–≥—Ä–∞–¥', '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', '–°–∞—Ä–∞—Ç–æ–≤', '–¢—é–º–µ–Ω—å', '–¢–æ–ª—å—è—Ç—Ç–∏', '–ò–∂–µ–≤—Å–∫', '–ë–∞—Ä–Ω–∞—É–ª',
  
  // –ö—Ä—É–ø–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã
  '–£–ª—å—è–Ω–æ–≤—Å–∫', '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫', '–Ø—Ä–æ—Å–ª–∞–≤–ª—å', '–ò—Ä–∫—É—Ç—Å–∫', '–•–∞–±–∞—Ä–æ–≤—Å–∫', '–ú–∞—Ö–∞—á–∫–∞–ª–∞', '–¢–æ–º—Å–∫',
  '–û—Ä–µ–Ω–±—É—Ä–≥', '–ö–µ–º–µ—Ä–æ–≤–æ', '–ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫', '–†—è–∑–∞–Ω—å', '–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å', '–ü–µ–Ω–∑–∞', '–õ–∏–ø–µ—Ü–∫',
  '–¢—É–ª–∞', '–ö–∏—Ä–æ–≤', '–ß–µ–±–æ–∫—Å–∞—Ä—ã', '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥', '–ë—Ä—è–Ω—Å–∫', '–ö—É—Ä—Å–∫', '–ò–≤–∞–Ω–æ–≤–æ', '–ú–∞–≥–Ω–∏—Ç–æ–≥–æ—Ä—Å–∫',
  '–¢–≤–µ—Ä—å', '–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å', '–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å', '–ë–µ–ª–≥–æ—Ä–æ–¥', '–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫', '–í–ª–∞–¥–∏–º–∏—Ä', '–°–æ—á–∏',
  '–ö—É—Ä–≥–∞–Ω', '–°–º–æ–ª–µ–Ω—Å–∫', '–ö–∞–ª—É–≥–∞', '–ß–∏—Ç–∞', '–û—Ä—ë–ª', '–í–æ–ª–∂—Å–∫–∏–π', '–ß–µ—Ä–µ–ø–æ–≤–µ—Ü', '–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑',
  '–ú—É—Ä–º–∞–Ω—Å–∫', '–°—É—Ä–≥—É—Ç', '–í–æ–ª–æ–≥–¥–∞', '–¢–∞–º–±–æ–≤', '–°—Ç–µ—Ä–ª–∏—Ç–∞–º–∞–∫', '–ì—Ä–æ–∑–Ω—ã–π', '–Ø–∫—É—Ç—Å–∫',
  '–ö–æ—Å—Ç—Ä–æ–º–∞', '–ö–æ–º—Å–æ–º–æ–ª—å—Å–∫-–Ω–∞-–ê–º—É—Ä–µ', '–ü–µ—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫', '–¢–∞–≥–∞–Ω—Ä–æ–≥', '–ù–∏–∂–Ω–µ–≤–∞—Ä—Ç–æ–≤—Å–∫', '–ô–æ—à–∫–∞—Ä-–û–ª–∞',
  
  // –ì–æ—Ä–æ–¥–∞ —Å –Ω–∞—Å–µ–ª–µ–Ω–∏–µ–º –±–æ–ª–µ–µ 200 —Ç—ã—Å—è—á
  '–ë—Ä–∞—Ç—Å–∫', '–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫', '–î–∑–µ—Ä–∂–∏–Ω—Å–∫', '–®–∞—Ö—Ç—ã', '–ù–∏–∂–Ω–µ–∫–∞–º—Å–∫', '–û—Ä—Å–∫', '–ê–Ω–≥–∞—Ä—Å–∫',
  '–°—Ç–∞—Ä—ã–π –û—Å–∫–æ–ª', '–í–µ–ª–∏–∫–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', '–ë–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫', '–ü—Ä–æ–∫–æ–ø—å–µ–≤—Å–∫', '–•–∏–º–∫–∏', '–ë–∏–π—Å–∫',
  '–≠–Ω–≥–µ–ª—å—Å', '–†—ã–±–∏–Ω—Å–∫', '–ë–∞–ª–∞—à–∏—Ö–∞', '–°–µ–≤–µ—Ä–æ–¥–≤–∏–Ω—Å–∫', '–ê—Ä–º–∞–≤–∏—Ä', '–ü–æ–¥–æ–ª—å—Å–∫', '–ö–æ—Ä–æ–ª—ë–≤',
  '–°—ã–∑—Ä–∞–Ω—å', '–ù–æ—Ä–∏–ª—å—Å–∫', '–ö–∞–º–µ–Ω—Å–∫-–£—Ä–∞–ª—å—Å–∫–∏–π', '–ê–ª—å–º–µ—Ç—å–µ–≤—Å–∫', '–£—Å—Å—É—Ä–∏–π—Å–∫', '–ú—ã—Ç–∏—â–∏', 
  '–õ—é–±–µ—Ä—Ü—ã', '–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å', '–°–∞–ª–∞–≤–∞—Ç', '–ú–∏–∞—Å—Å', '–ê–±–∞–∫–∞–Ω', '–†—É–±—Ü–æ–≤—Å–∫', '–ö–æ–ª–æ–º–Ω–∞', 
  '–ú–∞–π–∫–æ–ø', '–ö–æ–≤—Ä–æ–≤', '–ö—Ä–∞—Å–Ω–æ–≥–æ—Ä—Å–∫', '–ù–∞–ª—å—á–∏–∫', '–£—Å—Ç—å-–ò–ª–∏–º—Å–∫', '–°–µ—Ä–ø—É—Ö–æ–≤', '–ù–æ–≤–æ—á–µ–±–æ–∫—Å–∞—Ä—Å–∫', 
  '–ù–µ—Ñ—Ç–µ—é–≥–∞–Ω—Å–∫', '–î–∏–º–∏—Ç—Ä–æ–≤–≥—Ä–∞–¥', '–ù–µ—Ñ—Ç–µ–∫–∞–º—Å–∫', '–ß–µ—Ä–∫–µ—Å—Å–∫', '–î–µ—Ä–±–µ–Ω—Ç', '–ö–∞–º—ã—à–∏–Ω', 
  '–ù–æ–≤—ã–π –£—Ä–µ–Ω–≥–æ–π', '–ú—É—Ä–æ–º', '–ê—á–∏–Ω—Å–∫', '–ö–∏—Å–ª–æ–≤–æ–¥—Å–∫', '–ü–µ—Ä–≤–æ—É—Ä–∞–ª—å—Å–∫', '–ï–ª–µ—Ü', '–ï–≤–ø–∞—Ç–æ—Ä–∏—è', 
  '–ê—Ä–∑–∞–º–∞—Å', '–¢–æ–±–æ–ª—å—Å–∫', '–ñ—É–∫–æ–≤—Å–∫–∏–π', '–ù–æ—è–±—Ä—å—Å–∫', '–ù–µ–≤–∏–Ω–Ω–æ–º—ã—Å—Å–∫', '–ë–µ—Ä–µ–∑–Ω–∏–∫–∏', '–ù–∞–∑—Ä–∞–Ω—å', 
  '–Æ–∂–Ω–æ-–°–∞—Ö–∞–ª–∏–Ω—Å–∫', '–í–æ–ª–≥–æ–¥–æ–Ω—Å–∫', '–°—ã–∫—Ç—ã–≤–∫–∞—Ä', '–ù–æ–≤–æ—á–µ—Ä–∫–∞—Å—Å–∫', '–ö–∞—Å–ø–∏–π—Å–∫', '–û–±–Ω–∏–Ω—Å–∫', 
  '–ü—è—Ç–∏–≥–æ—Ä—Å–∫', '–û–∫—Ç—è–±—Ä—å—Å–∫–∏–π', '–õ–æ–º–æ–Ω–æ—Å–æ–≤'
];

// –ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–æ–≤ —Å –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–æ–º
router.get('/suggestions', (req, res) => {
  try {
    const { query, limit = 10 } = req.query;
    
    if (!query || query.length < 2) {
      return res.json({
        success: true,
        data: [],
        message: '–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞'
      });
    }

    const queryLower = query.toLowerCase().trim();
    const results = [];
    const maxResults = Math.min(parseInt(limit), 20);

    // –ü–æ–∏—Å–∫ —Å –ø–æ–¥—Å—á–µ—Ç–æ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    RUSSIAN_CITIES.forEach((city, index) => {
      const cityLower = city.toLowerCase();
      let score = 0;

      if (cityLower === queryLower) {
        score = 1000; // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
      } else if (cityLower.startsWith(queryLower)) {
        score = 500; // –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–ø—Ä–æ—Å–∞
      } else if (cityLower.includes(queryLower)) {
        score = 200; // –°–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–æ—Å
      } else if (queryLower.length >= 3) {
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ö–æ–∂–µ—Å—Ç–∏ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        const similarity = calculateSimilarity(queryLower, cityLower);
        if (similarity > 0.6) {
          score = similarity * 100;
        }
      }

      if (score > 0) {
        // –ë–æ–Ω—É—Å –∑–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å (—á–µ–º —Ä–∞–Ω—å—à–µ –≤ —Å–ø–∏—Å–∫–µ, —Ç–µ–º –ø–æ–ø—É–ª—è—Ä–Ω–µ–µ)
        const popularityBonus = (RUSSIAN_CITIES.length - index) * 2;
        score += popularityBonus;

        results.push({
          city: city,
          display: city,
          score: score,
          type: 'city'
        });
      }
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    results.sort((a, b) => b.score - a.score);
    const limitedResults = results.slice(0, maxResults);

    console.log(`üîç –ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–æ–≤: "${query}" -> ${limitedResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);

    res.json({
      success: true,
      data: limitedResults,
      query: query,
      count: limitedResults.length
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤:', error.message);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ—Ä–æ–¥–µ
router.get('/city/:cityName', (req, res) => {
  try {
    const { cityName } = req.params;
    
    const city = RUSSIAN_CITIES.find(c => 
      c.toLowerCase() === cityName.toLowerCase()
    );

    if (!city) {
      return res.status(404).json({
        success: false,
        error: '–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ—Ä–æ–¥–µ
    res.json({
      success: true,
      data: {
        city: city,
        country: '–†–æ—Å—Å–∏—è',
        type: 'city'
      }
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ—Ä–æ–¥–µ:', error.message);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞
router.post('/validate', (req, res) => {
  try {
    const { address } = req.body;
    
    if (!address || !address.trim()) {
      return res.status(400).json({
        success: false,
        error: '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'
      });
    }

    // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥–æ—Ä–æ–¥ –≤ –Ω–∞—à–µ–º —Å–ø–∏—Å–∫–µ
    const addressLower = address.toLowerCase().trim();
    const foundCity = RUSSIAN_CITIES.find(city => 
      addressLower.includes(city.toLowerCase())
    );

    res.json({
      success: true,
      data: {
        isValid: !!foundCity,
        foundCity: foundCity || null,
        originalAddress: address
      }
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞:', error.message);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ—Ö–æ–∂–µ—Å—Ç–∏ —Å—Ç—Ä–æ–∫
function calculateSimilarity(str1, str2) {
  if (str1.length === 0) return str2.length === 0 ? 1 : 0;
  if (str2.length === 0) return 0;
  
  let matches = 0;
  const minLen = Math.min(str1.length, str2.length);
  
  for (let i = 0; i < minLen; i++) {
    if (str1[i] === str2[i]) {
      matches++;
    }
  }
  
  return matches / Math.max(str1.length, str2.length);
}

module.exports = router;