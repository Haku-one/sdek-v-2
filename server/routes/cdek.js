const express = require('express');
const router = express.Router();
const CdekAPI = require('../services/CdekAPI');

const cdekAPI = new CdekAPI();

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–Ω–∫—Ç–æ–≤ –≤—ã–¥–∞—á–∏
router.get('/points', async (req, res) => {
  try {
    const { city } = req.query;
    
    console.log('üìç –ó–∞–ø—Ä–æ—Å –ø—É–Ω–∫—Ç–æ–≤ –≤—ã–¥–∞—á–∏ –¥–ª—è –≥–æ—Ä–æ–¥–∞:', city || '–≤—Å–µ –≥–æ—Ä–æ–¥–∞');
    
    const points = await cdekAPI.getDeliveryPoints(city);
    
    res.json({
      success: true,
      data: points,
      count: points.length,
      city: city || null
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–Ω–∫—Ç–æ–≤ –≤—ã–¥–∞—á–∏:', error.message);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
router.post('/calculate', async (req, res) => {
  try {
    const {
      pointCode,
      pointData,
      cartWeight,
      cartDimensions,
      cartValue,
      hasRealDimensions
    } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!pointCode) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ —É–∫–∞–∑–∞–Ω –∫–æ–¥ –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏'
      });
    }

    if (!cartDimensions || !cartDimensions.length || !cartDimensions.width || !cartDimensions.height) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≥–∞–±–∞—Ä–∏—Ç—ã —Ç–æ–≤–∞—Ä–∞'
      });
    }

    console.log('üí∞ –ó–∞–ø—Ä–æ—Å —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:', {
      pointCode,
      cartWeight,
      cartValue,
      cartDimensions,
      hasRealDimensions
    });

    const costData = await cdekAPI.calculateDeliveryCost(
      pointCode,
      pointData,
      cartWeight,
      cartDimensions,
      cartValue,
      hasRealDimensions
    );

    res.json({
      success: true,
      data: costData
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:', error.message);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API –°–î–≠–ö
router.get('/test-connection', async (req, res) => {
  try {
    console.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API –°–î–≠–ö');
    
    const token = await cdekAPI.getAuthToken();
    
    if (token) {
      res.json({
        success: true,
        message: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API –°–î–≠–ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
        token_preview: token.substring(0, 20) + '...'
      });
    } else {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API –°–î–≠–ö:', error.message);
    res.status(500).json({
      success: false,
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API –°–î–≠–ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.'
    });
  }
});

module.exports = router;