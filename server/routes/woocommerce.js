const express = require('express');
const router = express.Router();
const axios = require('axios');

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω—ã WooCommerce
router.post('/cart-data', async (req, res) => {
  try {
    const { cartItems, wooApiUrl, wooApiKey, wooApiSecret } = req.body;
    
    if (!cartItems || !Array.isArray(cartItems)) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã'
      });
    }

    console.log('üõí –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω—ã WooCommerce:', cartItems.length, '—Ç–æ–≤–∞—Ä–æ–≤');

    const processedCart = await processCartData(cartItems, wooApiUrl, wooApiKey, wooApiSecret);

    res.json({
      success: true,
      data: processedCart
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω—ã:', error.message);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ WooCommerce
router.post('/update-shipping', async (req, res) => {
  try {
    const { 
      orderId, 
      shippingCost, 
      pointData, 
      wooApiUrl, 
      wooApiKey, 
      wooApiSecret 
    } = req.body;

    if (!orderId || !shippingCost) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ —É–∫–∞–∑–∞–Ω—ã ID –∑–∞–∫–∞–∑–∞ –∏–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏'
      });
    }

    console.log('üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞:', orderId, '—Å—Ç–æ–∏–º–æ—Å—Ç—å:', shippingCost);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    const updateData = {
      shipping_lines: [{
        method_id: 'cdek_delivery',
        method_title: '–°–î–≠–ö –î–æ—Å—Ç–∞–≤–∫–∞',
        total: shippingCost.toString()
      }]
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã–µ –æ –ø—É–Ω–∫—Ç–µ –≤—ã–¥–∞—á–∏
    if (pointData) {
      updateData.meta_data = [
        {
          key: '_cdek_point_code',
          value: pointData.code
        },
        {
          key: '_cdek_point_data',
          value: JSON.stringify(pointData)
        }
      ];
    }

    // –ï—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ API WooCommerce, –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
    if (wooApiUrl && wooApiKey && wooApiSecret) {
      const wooResponse = await updateWooCommerceOrder(
        orderId, 
        updateData, 
        wooApiUrl, 
        wooApiKey, 
        wooApiSecret
      );
      
      res.json({
        success: true,
        data: {
          orderId: orderId,
          shippingCost: shippingCost,
          wooResponse: wooResponse
        }
      });
    } else {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      res.json({
        success: true,
        data: {
          orderId: orderId,
          shippingCost: shippingCost,
          updateData: updateData,
          message: '–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã'
        }
      });
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏:', error.message);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
router.get('/order/:orderId', async (req, res) => {
  try {
    const { orderId } = req.params;
    const { wooApiUrl, wooApiKey, wooApiSecret } = req.query;

    if (!wooApiUrl || !wooApiKey || !wooApiSecret) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ —É–∫–∞–∑–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WooCommerce API'
      });
    }

    console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ:', orderId);

    const orderData = await getWooCommerceOrder(orderId, wooApiUrl, wooApiKey, wooApiSecret);

    res.json({
      success: true,
      data: orderData
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error.message);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω—ã
async function processCartData(cartItems, wooApiUrl, wooApiKey, wooApiSecret) {
  let totalWeight = 0;
  let totalValue = 0;
  let totalVolume = 0;
  let maxLength = 0;
  let maxWidth = 0;
  let maxHeight = 0;
  let hasValidDimensions = false;
  let totalItems = 0;

  for (const item of cartItems) {
    const quantity = parseInt(item.quantity) || 1;
    totalItems += quantity;

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ WooCommerce API –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
    let productData = item;
    if (wooApiUrl && wooApiKey && wooApiSecret && item.product_id) {
      try {
        productData = await getWooCommerceProduct(item.product_id, wooApiUrl, wooApiKey, wooApiSecret);
      } catch (error) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ API:', error.message);
      }
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–∞–±–∞—Ä–∏—Ç—ã
    const length = parseFloat(productData.dimensions?.length || item.length || 0);
    const width = parseFloat(productData.dimensions?.width || item.width || 0);
    const height = parseFloat(productData.dimensions?.height || item.height || 0);

    if (length && width && height) {
      hasValidDimensions = true;
      const itemVolume = length * width * height * quantity;
      totalVolume += itemVolume;
      
      maxLength = Math.max(maxLength, length);
      maxWidth = Math.max(maxWidth, width);
      maxHeight = Math.max(maxHeight, height);
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–µ—Å
    const weight = parseFloat(productData.weight || item.weight || 0);
    if (weight) {
      totalWeight += weight * quantity;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    const price = parseFloat(productData.price || item.price || 0);
    totalValue += price * quantity;
  }

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —É–ø–∞–∫–æ–≤–∫–∏
  let dimensions;
  let packagesCount = 1;

  if (hasValidDimensions && totalVolume > 0) {
    if (totalItems <= 2) {
      dimensions = {
        length: Math.ceil(maxLength * 1.05),
        width: Math.ceil(maxWidth * 1.05),
        height: Math.ceil(maxHeight * 1.05)
      };
    } else {
      const volumeRatio = Math.pow(totalVolume / (maxLength * maxWidth * maxHeight), 1/3);
      
      dimensions = {
        length: Math.ceil(maxLength * Math.max(volumeRatio, 1) * 1.1),
        width: Math.ceil(maxWidth * Math.max(volumeRatio, 1) * 1.1),
        height: Math.ceil(maxHeight * Math.max(volumeRatio, 1) * 1.1)
      };
    }

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
    dimensions.length = Math.max(10, Math.min(dimensions.length, 150));
    dimensions.width = Math.max(10, Math.min(dimensions.width, 150));
    dimensions.height = Math.max(5, Math.min(dimensions.height, 150));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –°–î–≠–ö (—Å—É–º–º–∞ –¥–ª–∏–Ω—ã, —à–∏—Ä–∏–Ω—ã –∏ –≤—ã—Å–æ—Ç—ã –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 300 —Å–º)
    const totalSize = dimensions.length + dimensions.width + dimensions.height;
    if (totalSize > 300) {
      packagesCount = Math.ceil(totalSize / 280);
      
      // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –æ–¥–Ω–æ–π –∫–æ—Ä–æ–±–∫–∏
      const scaleFactor = 280 / totalSize;
      dimensions = {
        length: Math.max(10, Math.ceil(dimensions.length * scaleFactor)),
        width: Math.max(10, Math.ceil(dimensions.width * scaleFactor)),
        height: Math.max(5, Math.ceil(dimensions.height * scaleFactor))
      };

      totalWeight = totalWeight / packagesCount;
    }
  } else {
    // –†–∞–∑–º–µ—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    dimensions = {
      length: 30,
      width: 20,
      height: 15
    };
  }

  // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  if (totalWeight === 0) totalWeight = 500;
  if (totalValue === 0) totalValue = 1000;

  return {
    weight: totalWeight,
    value: totalValue,
    dimensions: dimensions,
    hasRealDimensions: hasValidDimensions,
    packagesCount: packagesCount,
    totalItems: totalItems,
    totalVolume: totalVolume
  };
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ WooCommerce API
async function getWooCommerceProduct(productId, apiUrl, apiKey, apiSecret) {
  const auth = Buffer.from(`${apiKey}:${apiSecret}`).toString('base64');
  
  const response = await axios.get(`${apiUrl}/wp-json/wc/v3/products/${productId}`, {
    headers: {
      'Authorization': `Basic ${auth}`,
      'Content-Type': 'application/json'
    }
  });

  return response.data;
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ WooCommerce
async function updateWooCommerceOrder(orderId, updateData, apiUrl, apiKey, apiSecret) {
  const auth = Buffer.from(`${apiKey}:${apiSecret}`).toString('base64');
  
  const response = await axios.put(`${apiUrl}/wp-json/wc/v3/orders/${orderId}`, updateData, {
    headers: {
      'Authorization': `Basic ${auth}`,
      'Content-Type': 'application/json'
    }
  });

  return response.data;
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏–∑ WooCommerce
async function getWooCommerceOrder(orderId, apiUrl, apiKey, apiSecret) {
  const auth = Buffer.from(`${apiKey}:${apiSecret}`).toString('base64');
  
  const response = await axios.get(`${apiUrl}/wp-json/wc/v3/orders/${orderId}`, {
    headers: {
      'Authorization': `Basic ${auth}`,
      'Content-Type': 'application/json'
    }
  });

  return response.data;
}

module.exports = router;