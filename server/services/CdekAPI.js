const axios = require('axios');

class CdekAPI {
  constructor() {
    this.account = process.env.CDEK_ACCOUNT || 'Lr7x5fauu0eOXDA4hlK04HiMUpqHgzzR';
    this.password = process.env.CDEK_PASSWORD || 'fzwKqoaKaTrwRjxVhf6csNzTefyHRHYM';
    this.baseUrl = 'https://api.cdek.ru/v2';
    this.senderCityCode = process.env.CDEK_SENDER_CITY || '428'; // –°–∞—Ä–∞—Ç–æ–≤
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º axios instance —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    this.api = axios.create({
      baseURL: this.baseUrl,
      timeout: 30000,
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'Modern-CDEK-Integration/1.0'
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    this.api.interceptors.request.use(async (config) => {
      if (!config.headers.Authorization && !config.url.includes('/oauth/token')) {
        const token = await this.getAuthToken();
        if (token) {
          config.headers.Authorization = `Bearer ${token}`;
        }
      }
      return config;
    });

    this.tokenCache = null;
    this.tokenExpiry = null;
  }

  async getAuthToken() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
    if (this.tokenCache && this.tokenExpiry && Date.now() < this.tokenExpiry) {
      return this.tokenCache;
    }

    try {
      console.log('üîë –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –°–î–≠–ö');
      
      const response = await axios.post(`${this.baseUrl}/oauth/token`, {
        grant_type: 'client_credentials',
        client_id: this.account,
        client_secret: this.password
      }, {
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        },
        timeout: 30000
      });

      if (response.data && response.data.access_token) {
        this.tokenCache = response.data.access_token;
        const expiresIn = response.data.expires_in || 3600;
        this.tokenExpiry = Date.now() + (expiresIn - 60) * 1000; // -60 —Å–µ–∫ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        
        console.log('‚úÖ –¢–æ–∫–µ–Ω –°–î–≠–ö –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        return this.tokenCache;
      }
      
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å access_token');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –°–î–≠–ö:', error.message);
      throw new Error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ API –°–î–≠–ö');
    }
  }

  async getDeliveryPoints(city = null) {
    try {
      console.log('üîç –ü–æ–ª—É—á–∞–µ–º –ø—É–Ω–∫—Ç—ã –≤—ã–¥–∞—á–∏ –°–î–≠–ö –¥–ª—è –≥–æ—Ä–æ–¥–∞:', city || '–≤—Å–µ –≥–æ—Ä–æ–¥–∞');
      
      const params = {
        country_code: 'RU',
        size: 5000,
        page: 0
      };

      if (city && city.trim()) {
        params.city = city.trim();
      }

      const response = await this.api.get('/deliverypoints', { params });
      
      if (response.data) {
        const points = Array.isArray(response.data) ? response.data : 
                      (response.data.entity ? response.data.entity : []);
        
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${points.length} –ø—É–Ω–∫—Ç–æ–≤ –≤—ã–¥–∞—á–∏ –°–î–≠–ö`);
        return points;
      }
      
      return [];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–Ω–∫—Ç–æ–≤ –≤—ã–¥–∞—á–∏ –°–î–≠–ö:', error.message);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É–Ω–∫—Ç—ã –≤—ã–¥–∞—á–∏');
    }
  }

  async calculateDeliveryCost(pointCode, pointData, cartWeight, cartDimensions, cartValue, hasRealDimensions = false) {
    try {
      console.log('üí∞ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –ø—É–Ω–∫—Ç–∞:', pointCode);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
      const toLocation = this.determineDestinationLocation(pointCode, pointData);
      if (!toLocation) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è');
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—ã–ª–∫–∏
      const packages = [{
        weight: Math.max(100, parseInt(cartWeight)), // –ú–∏–Ω–∏–º—É–º 100–≥
        length: Math.max(10, parseInt(cartDimensions.length)), // –ú–∏–Ω–∏–º—É–º 10—Å–º
        width: Math.max(10, parseInt(cartDimensions.width)),
        height: Math.max(5, parseInt(cartDimensions.height))
      }];

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
      const requestData = {
        date: new Date().toISOString(),
        type: 1, // –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω
        currency: 1, // RUB
        lang: 'rus',
        tariff_code: 136, // –ü–æ—Å—ã–ª–∫–∞ —Å–∫–ª–∞–¥-–ø–æ—Å—Ç–∞–º–∞—Ç/–ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏
        from_location: { code: parseInt(this.senderCityCode) },
        to_location: toLocation,
        packages: packages
      };

      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (cartValue > 3000) {
        requestData.services = [{
          code: 'INSURANCE',
          parameter: String(parseInt(cartValue))
        }];
      }

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Ä–∞—Å—á–µ—Ç–∞:', JSON.stringify(requestData, null, 2));

      const response = await this.api.post('/calculator/tariff', requestData);

      if (response.data && response.data.delivery_sum && response.data.delivery_sum > 0) {
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:', response.data.delivery_sum, '—Ä—É–±.');
        
        return {
          delivery_sum: parseInt(response.data.delivery_sum),
          period_min: response.data.period_min || null,
          period_max: response.data.period_max || null,
          api_success: true
        };
      }

      // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞—Ä–∏—Ñ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ
      return await this.tryAlternativeCalculation(requestData);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:', error.message);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback —Ä–∞—Å—á–µ—Ç
      return this.calculateFallbackCost(cartWeight, cartValue, cartDimensions, hasRealDimensions);
    }
  }

  determineDestinationLocation(pointCode, pointData) {
    if (!pointData || !pointData.location) {
      return null;
    }

    // –°–ø–æ—Å–æ–± 1: city_code
    if (pointData.location.city_code) {
      return { code: parseInt(pointData.location.city_code) };
    }

    // –°–ø–æ—Å–æ–± 2: postal_code
    if (pointData.location.postal_code) {
      return { postal_code: pointData.location.postal_code };
    }

    // –°–ø–æ—Å–æ–± 3: city name
    if (pointData.location.city) {
      return { city: pointData.location.city.trim() };
    }

    // –°–ø–æ—Å–æ–± 4: –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–æ–¥—É –ø—É–Ω–∫—Ç–∞
    const cityCodeMap = {
      'MSK': { code: 44, name: '–ú–æ—Å–∫–≤–∞' },
      'SPB': { code: 137, name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥' },
      'NSK': { code: 270, name: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫' },
      'EKB': { code: 51, name: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥' },
      'KZN': { code: 172, name: '–ö–∞–∑–∞–Ω—å' },
      'SRT': { code: 354, name: '–°–∞—Ä–∞—Ç–æ–≤' }
    };

    for (const [prefix, cityInfo] of Object.entries(cityCodeMap)) {
      if (pointCode.toUpperCase().startsWith(prefix)) {
        console.log(`üèôÔ∏è –û–ø—Ä–µ–¥–µ–ª–µ–Ω –≥–æ—Ä–æ–¥ ${cityInfo.name} –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É –ø—É–Ω–∫—Ç–∞`);
        return { code: cityInfo.code };
      }
    }

    return null;
  }

  async tryAlternativeCalculation(originalData) {
    const alternativeTariffs = [138, 233, 234]; // –ü–æ—Å—Ç–∞–º–∞—Ç, –≠–∫–æ–Ω–æ–º, –°—Ç–∞–Ω–¥–∞—Ä—Ç
    
    for (const tariff of alternativeTariffs) {
      try {
        const data = { ...originalData, tariff_code: tariff };
        const response = await this.api.post('/calculator/tariff', data);
        
        if (response.data && response.data.delivery_sum && response.data.delivery_sum > 0) {
          console.log(`‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ä–∞—Å—á–µ—Ç —É—Å–ø–µ—à–µ–Ω —Å —Ç–∞—Ä–∏—Ñ–æ–º ${tariff}:`, response.data.delivery_sum);
          
          return {
            delivery_sum: parseInt(response.data.delivery_sum),
            period_min: response.data.period_min || null,
            period_max: response.data.period_max || null,
            api_success: true,
            alternative_tariff: tariff
          };
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è –¢–∞—Ä–∏—Ñ ${tariff} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:`, error.message);
        continue;
      }
    }

    throw new Error('–í—Å–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏');
  }

  calculateFallbackCost(weight, value, dimensions, hasRealDimensions) {
    console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏');
    
    let baseCost = 350;

    // –ù–∞–¥–±–∞–≤–∫–∞ –∑–∞ –≤–µ—Å
    if (weight > 500) {
      const extraWeight = Math.ceil((weight - 500) / 500);
      baseCost += extraWeight * 40;
    }

    // –ù–∞–¥–±–∞–≤–∫–∞ –∑–∞ –≥–∞–±–∞—Ä–∏—Ç—ã
    if (hasRealDimensions && dimensions) {
      const volume = dimensions.length * dimensions.width * dimensions.height;
      if (volume > 12000) {
        const extraVolume = Math.ceil((volume - 12000) / 6000);
        baseCost += extraVolume * 60;
      }
    }

    // –ù–∞–¥–±–∞–≤–∫–∞ –∑–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å
    if (value > 3000) {
      baseCost += Math.ceil((value - 3000) / 1000) * 25;
    }

    return {
      delivery_sum: baseCost,
      fallback: true,
      api_success: false
    };
  }
}

module.exports = CdekAPI;